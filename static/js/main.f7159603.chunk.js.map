{"version":3,"sources":["js/layout/layout.worker.js","js/util/Events.js","js/graph/Cell.js","js/graph/label.js","js/graph/Node.js","js/util/Collection.js","js/graph/Graph.js","js/util/util.js","js/layout/getWorker.js","js/layout/layout.js","js/ui/computeNodeColor.js","js/graph/PortTypes.js","js/ui/renderNode.js","js/ui/graphStyle.js","js/util/roundPoint.js","js/util/geometry.js","js/ui/renderEdge.js","js/ui/renderGraph.js","js/ui/Workspace.js","js/ui/panZoom.js","js/graph/EdgeTypes.js","js/graph/Edge.js","js/ui/textSandbox.js","js/graph/NodeWithPort.js","js/util/random.js","js/messaging/startListening.js","js/messaging/constants.js","js/messaging/RandomGraph.js","js/messaging/MockMessager.js","js/iframe/iframeHandler.js","index.js"],"names":["module","exports","Worker","__webpack_public_path__","Events","Object","classCallCheck","this","_events","name","callback","context","push","events","keys","forEach","handlers","remaining","filter","handler","handlersForAll","_len","arguments","length","args","Array","_key","_triggerHandlers","concat","apply","Cell","graph","addCell","computeNodeGraphId","contextId","nodeId","computeInPortLabel","portIndex","computeOutPortLabel","computeAudioParamPortLabel","computeNodeLabel","nodeType","Node","message","_this","possibleConstructorReturn","getPrototypeOf","call","id","endsWith","slice","type","nodeLabel","_size","_pos","size","pos","Collection","items","opt","_items","defaults","trackEnter","trackExit","_trackEnter","_trackExit","_enter","_exit","isArray","addItems","item","Error","set","add","hasOwnProperty","values","Graph","_nodes","_edges","_out","_in","cell","addNode","addEdge","node","_shouldRedraw","removeNode","removeEdgesOfNode","remove","_this2","outEdges","edgeId","removeEdge","inEdges","edge","sourceId","source","targetId","target","exit","get","trigger","clearEnterExit","noop","isEmptyArray","arr","workers","computeLayout","marginx","marginX","marginy","marginY","glLabel","rankdir","glGraph","convertToGraphlib","directed","setNodeLabel","setEdgeLabel","setGraph","afterLayout","convertBackToGraph","glSize","width","Math","abs","height","getLayoutBBox","useWorker","myWorker","LayoutWorker","onmessage","e","graphlib","json","read","data","getWorker","postMessage","write","dagre","layout","debugTiming","_node$getSize","getSize","getNodes","setNode","getEdges","setEdge","nodes","getNode","setPos","x","y","edges","edgeLabel","getEdge","setPoints","points","computeNodeColor","isOffline","PortTypes","IN","Symbol","OUT","PARAM","getOffsetXDueToPorts","offsetX","getPorts","port","createPortElement","top","left","circle","label","fabric","Circle","radius","fill","stroke","strokeWidth","Text","text","fontSize","fontFamily","INPUT_PORT_RADIUS","Group","roundPoint","point","precision","f","pow","round","getPointByDistance","from","to","distance","p1","p2","dx","dy","sqrt","calcDistance","getPointByRatio","ratio","createPathAndArrowHead","canvas","showControlPoints","controlPoints","getPoints","middlePoints","_findConnectionPoints","findConnectionPoints","sourcePoint","targetPoint","drawCircle","pathD","createRoundedPath","arrowHeadPathD","createArrowHeadPath","path","Path","selectable","arrowHead","route","control1","control2","sourceNode","sourceCenterPos","getPos","sourceSize","sourcePos","targetNode","getPortById","targetCenterPos","targetSize","targetPos","point1","point2","segment","angle","atan2","calcAngleRadian","segments","createSegment","cos","PI","sin","join","controlPoint","curr","prev","next","roundedStart","roundedEnd","index","n","getMiddle","createCurve","action","parts","renderedObjects","saveRenderedObject","obj","renderGraph","console","log","startRenderTime","performance","now","has","nodeGroup","setCoords","updateNode","shouldRender","elements","nodeBackground","Rect","rx","ry","nodeLabelText","LEFT_SIDE_TOP_PADDING","group","hasRotatingPoint","hasControls","selectionBackgroundColor","hoverCursor","drawNode","getNodesToRemove","edgeGroup","forEachObject","_createPathAndArrowHe2","addWithUpdate","updateEdge","_createPathAndArrowHe","hasBorders","evented","drawEdge","getEdgesToRemove","requestRenderAll","renderEnd","nodeNum","edgeNum","getObjects","Workspace","_isRedrawPending","_isUsingWorker","_shouldRedrawNext","resize","on","requestRedraw","evt","isDragging","selection","lastPosX","clientX","lastPosY","clientY","viewportTransform","delta","deltaY","zoom","getZoom","zoomToPoint","offsetY","preventDefault","stopPropagation","window","innerWidth","document","documentElement","clientWidth","innerHeight","clientHeight","_setCanvasSize","setWidth","setHeight","requestAnimationFrame","_relayout","bind","_startLayoutTime","_redraw","bbox","EdgeTypes","Edge","_points","_init","JSON","stringify","sourcePortLabel","destinationPortLabel","sourceNodeId","destinationNodeId","fromChannel","toChannel","destinationParamName","textSandbox","TextSandbox","elemId","elem","getElementById","createElement","setAttribute","body","appendChild","className","classList","textContent","NodeWithPort","_ports","_computeNodeLayout","inputPorts","_prepareInputPorts","outputPorts","_prepareOutputPorts","paramPorts","_prepareParamPorts","_createPortData","setSize","maxTextLength","totalHeight","inputPortSectionHeight","max","numberOfInputs","paramPortSectionHeight","AUDIO_PARAM_RADIUS","audioParamNames","leftSideBottomPadding","numberOfOutputs","_computeMaxTextLength","start","i","setText","stop","ports","inputPortY","audioParamY","err","_validatePorts","errorMessages","p","_isValidPortId","undefined","isObject","getRandBumps","rand","m","k","j","z","w","exp","DEFAULT_NODE_ATTR","NODE_ATTRS","AudioBufferSource","Gain","Oscillator","BiquadFilter","AudioDestination","NODE_TYPES_EXCEPT_DESTINATION","str","a","b","c","d","seed","h","imul","charCodeAt","xmur3","t","randInt","num","floor","randBumps","randChoice","randIntBetween","end","getRandomGeneratorWithSeed","RandomGraph","messager","_count","_maxLevels","_maxNodesPerLevel","_nodeIdsByLevel","_messager","_manualMode","_updateMaxLevelByTotalNum","nodesPerLevels","_getRandomNodesByGausian","newNodes","val","level","nodeIds","_getRandomNode","_addNode","numOfAddedLinks","numberOfLinks","ceil","_getRandomTarget","_addRandomLinkTypeToPair","_getNodeByType","_connectLastLevelNodesToDestination","numOfRemovedNodes","idx","indexOf","splice","_removeNode","total","chunks","sum","reduce","res","map","_tryTargetInLevel","maxRetry","_this3","addNodeToNode","totalInputParam","_addNodeToNodeLink","_addNodeToParamLink","MockMessager","_randomGraph","manualMode","_startManualMock","_startAutoMock","addRandomNodesAndLinks","removeRandomNodesAndLinks","allowCyclic","attrs","objectSpread","btn","iframe","Canvas","ws","addEventListener","init","addTo","removeNodeAndEdges","event","eventType","contains"],"mappings":"yEAAAA,EAAOC,QAAU,WACf,OAAO,IAAIC,OAAOC,IAA0B,kRCQzBC,aACnB,SAAAA,IAAeC,OAAAC,EAAA,EAAAD,CAAAE,KAAAH,GAMbG,KAAKC,QAAU,kDAOdC,EAAMC,EAAUC,GACjB,OAAKF,GAASC,IAEGH,KAAKC,QAAQC,KAAUF,KAAKC,QAAQC,GAAQ,KACpDG,KAAK,CAAEF,WAAUC,QAASA,GAAWJ,OAEvCA,MALwBA,iCAa7BE,EAAMC,GACR,IAAKH,KAAKC,QAAS,OAAOD,KAE1B,IAAMM,EAASN,KAAKC,QAkBpB,OAjBcC,EAAO,CAACA,GAAQJ,OAAOS,KAAKD,IACpCE,QAAQ,SAAAN,GACZ,IAAMO,EAAWH,EAAOJ,GAGxB,GAAKO,EAGL,GAAKN,EAAL,CAKA,IAAMO,EAAYD,EAASE,OAAO,SAAAC,GAAO,OAAIA,EAAQT,WAAaA,IAClEG,EAAOJ,GAAQQ,cALNJ,EAAOJ,KAQXF,qCASDE,GACN,IAAKF,KAAKC,UAAYC,EAAM,OAAOF,KADd,IAGrB,IAAMS,EAAWT,KAAKC,QAAQC,GACxBW,EAAiBb,KAAKC,QAAL,IAJFa,EAAAC,UAAAC,OAANC,EAAM,IAAAC,MAAAJ,EAAA,EAAAA,EAAA,KAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAANF,EAAME,EAAA,GAAAJ,UAAAI,GAcrB,OARIV,GACFT,KAAKoB,iBAAiBX,EAAUQ,GAG9BJ,GACFb,KAAKoB,iBAAiBP,EAAgB,CAACX,GAAMmB,OAAOJ,IAG/CjB,8CAIQS,EAAUQ,GACzBR,EAASD,QAAQ,SAAAI,GACfA,EAAQT,SAASmB,MAAMV,EAAQR,QAASa,cCpEzBM,aACnB,SAAAA,IAAezB,OAAAC,EAAA,EAAAD,CAAAE,KAAAuB,GACbvB,KAAKwB,MAAQ,uDAGTA,GAGJ,OAFAxB,KAAKwB,MAAQA,EACbA,EAAMC,QAAQzB,MACPA,cCJE0B,EAAqB,SAACC,EAAWC,GAC5C,MAAO,IAAMD,EAAY,IAAMC,GAGpBC,EAAqB,SAACF,EAAWC,EAAQE,GACpD,OAAOJ,EAAmBC,EAAWC,GAAU,QAAUE,GAG9CC,EAAsB,SAACJ,EAAWC,EAAQE,GACrD,OAAOJ,EAAmBC,EAAWC,GAAU,SAAWE,GAG/CE,EAA6B,SAACL,EAAWC,EAAQ1B,GAC5D,OAAOwB,EAAmBC,EAAWC,GAAU,UAAY1B,GAGhD+B,EAAmB,SAACC,EAAUN,GACzC,OAAOM,EAAW,IAAMN,GCpBLO,cAEnB,SAAAA,EAAYC,GAAS,IAAAC,EAAAvC,OAAAC,EAAA,EAAAD,CAAAE,KAAAmC,IACnBE,EAAAvC,OAAAwC,EAAA,EAAAxC,CAAAE,KAAAF,OAAAyC,EAAA,EAAAzC,CAAAqC,GAAAK,KAAAxC,QAEKyC,GAAKf,EAAmBU,EAAQT,UAAWS,EAAQR,QAExD,IAAIM,EAAWE,EAAQF,SALJ,OAMfA,EAASQ,SAAS,UACpBR,EAAWA,EAASS,MAAM,EAAGT,EAASlB,OAAO,IAE/CqB,EAAKO,KAAOV,EACZG,EAAKQ,UAAYZ,EAAiBC,EAAUE,EAAQR,QAEpDS,EAAKS,MAAQ,KACbT,EAAKU,KAAO,KAbOV,yEAiBnB,OAAOrC,KAAK8C,sCAGNE,GACNhD,KAAK8C,MAAQE,mCAIb,OAAOhD,KAAK+C,oCAGPE,GAEL,OADAjD,KAAK+C,KAAOE,EACLjD,4CAIP,QAASA,KAAK+C,YApCgBxB,2BCbb2B,aACnB,SAAAA,EAAYC,EAAOC,GAAMtD,OAAAC,EAAA,EAAAD,CAAAE,KAAAkD,GAKvBlD,KAAKqD,OAAS,GAEdD,EAAME,IAASF,EAAK,CAACG,YAAY,EAAOC,WAAW,IAEnDxD,KAAKyD,YAAcL,EAAIG,WACvBvD,KAAK0D,WAAaN,EAAII,UAElBJ,EAAIG,aAKNvD,KAAK2D,OAAS,IAGZP,EAAII,YAKNxD,KAAK4D,MAAQ,IAGXT,GAASU,kBAAQV,IACnBnD,KAAK8D,SAASX,mDAIdV,EAAIsB,GACN,GAAyB,IAArBhD,UAAUC,OACZ,MAAM,IAAIgD,MAAM,6BAMlB,OAJIhE,KAAKyD,aACPzD,KAAK2D,OAAOtD,KAAK0D,GAEnB/D,KAAKiE,IAAIxB,EAAIsB,GACN/D,sCAGAmD,GAAO,IAAAd,EAAArC,KACdmD,EAAM3C,QAAQ,SAAAuD,GACZ1B,EAAK6B,IAAIH,EAAKtB,GAAIsB,iCAIlBtB,GACF,OAAOzC,KAAKqD,OAAOc,eAAe1B,+BAGhCA,GACF,OAAOzC,KAAKqD,OAAOZ,+BAGjBA,EAAIsB,GAEN,OADA/D,KAAKqD,OAAOZ,GAAMsB,EACX/D,oCAGFyC,GAKL,OAJIzC,KAAK0D,YAAc1D,KAAKqD,OAAOZ,IACjCzC,KAAK4D,MAAMvD,KAAKL,KAAKqD,OAAOZ,WAEvBzC,KAAKqD,OAAOZ,GACZzC,sCAIP,OAAOF,OAAOsE,OAAOpE,KAAKqD,uCAI1B,OAAOvD,OAAOS,KAAKP,KAAKqD,QAAQrC,uCAIhC,IAAKhB,KAAKyD,YACR,MAAM,IAAIO,MAAM,8BAElB,OAAOhE,KAAK2D,sCAIZ,IAAK3D,KAAK0D,WACR,MAAM,IAAIM,MAAM,6BAElB,OAAOhE,KAAK4D,+CAKR5D,KAAKyD,cACPzD,KAAK2D,OAAS,IAEZ3D,KAAK0D,aACP1D,KAAK4D,MAAQ,aCtFES,cACjB,SAAAA,IAAc,IAAAhC,EAAA,OAAAvC,OAAAC,EAAA,EAAAD,CAAAE,KAAAqE,IACVhC,EAAAvC,OAAAwC,EAAA,EAAAxC,CAAAE,KAAAF,OAAAyC,EAAA,EAAAzC,CAAAuE,GAAA7B,KAAAxC,QAEKsE,OAAS,IAAIpB,EAAW,KAAM,CAACM,WAAW,IAC/CnB,EAAKkC,OAAS,IAAIrB,EAAW,KAAM,CAACM,WAAW,IAG/CnB,EAAKmC,KAAO,GAGZnC,EAAKoC,IAAM,GAVDpC,uEAaNqC,GACAA,aAAgBvC,EAChBnC,KAAK2E,QAAQD,GAEb1E,KAAK4E,QAAQF,mCAIbG,GACJ7E,KAAKsE,OAAOJ,IAAIW,EAAKpC,GAAIoC,GACzB7E,KAAK8E,2DAIUlD,GACf5B,KAAK+E,WAAWnD,GAChB5B,KAAKgF,kBAAkBpD,sCAGhBA,GACP5B,KAAKsE,OAAOW,OAAOrD,GACnB5B,KAAK8E,0DAGSlD,GAAQ,IAAAsD,EAAAlF,KAChBmF,EAAWnF,KAAKwE,KAAK5C,GACvBuD,GACArF,OAAOS,KAAK4E,GAAU3E,QAAQ,SAAA4E,GAC1BF,EAAKG,WAAWD,KAGxB,IAAME,EAAUtF,KAAKyE,IAAI7C,GACrB0D,GACAxF,OAAOS,KAAK+E,GAAS9E,QAAQ,SAAA4E,GACzBF,EAAKG,WAAWD,YAGjBpF,KAAKwE,KAAK5C,UACV5B,KAAKyE,IAAI7C,mCAGZ2D,GACJ,IAAMC,EAAWD,EAAKE,OAAOhD,GAC7B,IAAIzC,KAAKwE,KAAKgB,KAAaxF,KAAKwE,KAAKgB,GAAUD,EAAK9C,IAApD,CAIAzC,KAAKuE,OAAOL,IAAIqB,EAAK9C,GAAI8C,GAEpBvF,KAAKwE,KAAKgB,KACXxF,KAAKwE,KAAKgB,GAAY,IAE1BxF,KAAKwE,KAAKgB,GAAUD,EAAK9C,KAAM,EAE/B,IAAMiD,EAAWH,EAAKI,OAAOlD,GACxBzC,KAAKyE,IAAIiB,KACV1F,KAAKyE,IAAIiB,GAAY,IAEzB1F,KAAKyE,IAAIiB,GAAUH,EAAK9C,KAAM,sCAGvB2C,GACPpF,KAAKuE,OAAOU,OAAOG,GACnBpF,KAAK8E,mDAIL,OAAO9E,KAAKsE,OAAOF,oDAInB,OAAOpE,KAAKsE,OAAOsB,uCAGfhE,GACJ,OAAO5B,KAAKsE,OAAOuB,IAAIjE,sCAIvB,OAAO5B,KAAKuE,OAAOH,oDAInB,OAAOpE,KAAKuE,OAAOqB,uCAGfR,GACJ,OAAOpF,KAAKuE,OAAOsB,IAAIT,2CAIvBpF,KAAK8F,QAAQ,oDAIb9F,KAAKsE,OAAOyB,iBACZ/F,KAAKuE,OAAOwB,wBA9GelG,oBCjBtBmG,EAAO,aAIPC,EAAe,SAACC,GAAD,OAAUA,GAAsB,IAAfA,EAAIlF,2CCH3CmF,EAAU,GCCHC,EAAgB,SAAC5E,EAAO4B,GAInC,IAAMiD,GAHNjD,EAAME,IAASF,GAAO,CAACjD,SAAU6F,KAGbM,SAAW,EACzBC,EAAUnD,EAAIoD,SAAW,EAEzBC,EAAU,CACdC,QAAS,KACTL,UACAE,WAGII,EAAUC,EAAkBpF,EAAO,CACvCqF,UAAU,EACVC,eACAC,iBAGFJ,EAAQK,SAASP,GAEjB,IAAMQ,EAAc,SAACN,GACnBO,EAAmBP,EAASnF,EAAO4B,GACnCA,EAAIjD,SAYN,SAAuBwG,GAErB,IAAMQ,EAASR,EAAQnF,QAEvB,MAAO,CACL6E,UACAE,UACAa,MAAOC,KAAKC,IAAIH,EAAOC,MAAQ,EAAIf,GACnCkB,OAAQF,KAAKC,IAAIH,EAAOI,OAAS,EAAIhB,IApB1BiB,CAAcb,KAGzBvD,EAAIqE,UD1Be,SAACtH,GAExB,GAAIgG,EAAQnF,OACV,OAAOmF,EAAQ,GAGjB,IAAMuB,EAAW,IAAIC,IAOrB,OANAD,EAASE,UAAY,SAASC,GAE5B,IAAMlB,EAAWmB,IAASC,KAAKC,KAAKH,EAAEI,MACtC9H,EAASwG,IAEXR,EAAQ9F,KAAKqH,GACNA,ECcYQ,CAAUjB,GAElBkB,YAAYL,IAASC,KAAKK,MAAMzB,KAEzC0B,IAAMC,OAAO3B,EAAS,CAAC4B,aAAa,IACpCtB,EAAYN,KAgBVG,EAAe,SAACjC,GAAS,IAAA2D,EACL3D,EAAK4D,UAC7B,MAAO,CAACrB,MAFqBoB,EACtBpB,MACQG,OAFciB,EACfjB,SAIVR,EAAe,SAACxB,GACpB,MAAO,CAAC9C,GAAI8C,EAAK9C,KAGbmE,EAAoB,SAACpF,EAAO4B,GAChC,IAAMuD,EAAU,IAAI0B,IAAMP,SAASzD,MAE7ByC,EAAe1D,EAAI0D,cAAgBd,EACnCe,EAAe3D,EAAI2D,cAAgBf,EAUzC,OARAxE,EAAMkH,WAAWlI,QAAQ,SAAAqE,GACvB8B,EAAQgC,QAAQ9D,EAAKpC,GAAIqE,EAAajC,MAGxCrD,EAAMoH,WAAWpI,QAAQ,SAAA+E,GACvBoB,EAAQkC,QAAQtD,EAAKE,OAAOhD,GAAI8C,EAAKI,OAAOlD,GAAIsE,EAAaxB,MAGxDoB,GAGHO,EAAqB,SAACP,EAASnF,GAEnCmF,EAAQmC,QAAQtI,QAAQ,SAAAoB,GACtB,IAAMiB,EAAY8D,EAAQ9B,KAAKjD,GAE/BJ,EAAMuH,QAAQnH,GAAQoH,OAAO,CAC3BC,EAAGpG,EAAUoG,EACbC,EAAGrG,EAAUqG,MAKjBvC,EAAQwC,QAAQ3I,QAAQ,SAAA+E,GACtB,IAAM6D,EAAYzC,EAAQpB,KAAKA,GAG/B/D,EAAM6H,QAAQD,EAAU3G,IAAI6G,UAAUF,EAAUG,WCxFvCC,EAAmB,SAAStH,EAAUuH,GAEjD,OAAQvH,GACN,IAAK,mBAGH,OAAOuH,EAAY,UAAY,UACjC,IAAK,oBACL,IAAK,aACH,MAAO,UACT,IAAK,eACL,IAAK,YACL,IAAK,QACL,IAAK,qBACL,IAAK,YACL,IAAK,SACL,IAAK,eACL,IAAK,aACH,MAAO,UACT,IAAK,WACH,MAAO,UACT,IAAK,OACL,IAAK,gBACL,IAAK,kBACH,MAAO,UACT,IAAK,0BACL,IAAK,8BACL,IAAK,yBACH,MAAO,UACT,IAAK,kBAEL,QAEE,MAAO,YCnCAC,EAAY,CACvBC,GAAIC,OAAO,MACXC,IAAKD,OAAO,OACZE,MAAOF,OAAO,UCwEVG,EAAuB,SAAClF,GAK5B,IAAImF,EAAU,EAQd,OAPAnF,EAAKoF,WAAWzJ,QAAQ,SAAA0J,GAClBA,EAAKtH,OAAS8G,EAAUC,GAC1BK,ECvF2B,GDwFlBE,EAAKtH,OAAS8G,EAAUI,OAAqB,IAAZE,IAC1CA,ECvF4B,KD0FzBA,GAGHG,EAAoB,SAACD,EAAMlH,GAC/B,IAAIoH,EAAKC,EACLC,EAAQC,EAEZ,OAAQL,EAAKtH,MACX,KAAK8G,EAAUC,GACbS,EChG+B,EDiG/BC,GCtG2B,GDuG3BC,EAAS,IAAIE,SAAOC,OAAO,CACzBC,OCxGyB,GDyGzBC,KClGwB,QDmGxBP,MACAC,OACAO,OAAQ,QACRC,YAAa,IAEfN,EAAQ,IAAIC,SAAOM,KAAKZ,EAAKa,KAAM,CACjCC,SAAU,GACVC,WAAY,uBACZN,KAAM,QACNP,IAAKA,EAAMc,IACXb,KAAMA,EAAO,IAEf,MACF,KAAKX,EAAUG,IACbO,EAAMpH,EAAKuE,OAAS,ECxHO,GDyH3B8C,EAAOrH,EAAKoE,MCzHe,GD0H3BkD,EAAS,IAAIE,SAAOC,OAAO,CACzBC,OC3HyB,GD4HzBC,KCpHyB,MDqHzBP,MACAC,OACAO,OAAQ,QACRC,YAAa,IAEfN,EAAQ,IAAIC,SAAOM,KAAKZ,EAAKa,KAAM,CACjCC,SAAU,GACVC,WAAY,uBACZN,KAAM,QACNN,KAAMA,EAAO,EACbD,IAAKA,EAAMc,MAEb,MACF,KAAKxB,EAAUI,MACbQ,EAAS,IAAIE,SAAOC,OAAO,CACzBC,OC1I0B,ED2I1BC,KCpIwB,SDqIxBP,KAAMF,EAAKhB,GAAK,GC5IU,ED6I1BmB,MAAM,EACNO,OAAQ,QACRC,YAAa,IAGfN,EAAQ,IAAIC,SAAOM,KAAKZ,EAAKa,KAAM,CACjCC,SAAU,GACVC,WAAY,uBACZN,KAAM,OACNN,KCpJwB,GDqJxBD,KAAMF,EAAKhB,GAAK,GCvJU,EDuJgB,IAE5C,MACF,QACE,MAAM,IAAIlF,MAAM,yBAGpB,OAAO,IAAIwG,SAAOW,MAAM,CAACb,EAAQC,GAAQ,KEzJ9Ba,EAAa,SAACC,EAAOC,GAChC,IAAIC,EAAIlE,KAAKmE,IAAI,GAAIF,GAAa,GAGlC,OAFAD,EAAMpC,EAAI5B,KAAKoE,MAAMJ,EAAMpC,EAAIsC,GAAKA,EACpCF,EAAMnC,EAAI7B,KAAKoE,MAAMJ,EAAMnC,EAAIqC,GAAKA,EAC7BF,GCUIK,EAAqB,SAACC,EAAMC,EAAIC,GAC3C,IAAM7K,EAVoB,SAAC8K,EAAIC,GAC/B,IAAMC,EAAKF,EAAG7C,EAAI8C,EAAG9C,EACfgD,EAAKH,EAAG5C,EAAI6C,EAAG7C,EACrB,OAAO7B,KAAK6E,KAAKF,EAAKA,EAAKC,EAAKA,GAOjBE,CAAaR,EAAMC,GAClC,GAAe,IAAX5K,EACF,MAAM,IAAIgD,MAAM,qCAGlB,OAAOoI,EAAgBT,EAAMC,EADfC,EAAW7K,IAGdoL,EAAkB,SAACT,EAAMC,EAAIS,GACxC,MAAO,CACLpD,EAAG0C,EAAK1C,GAAK2C,EAAG3C,EAAI0C,EAAK1C,GAAKoD,EAC9BnD,EAAGyC,EAAKzC,GAAK0C,EAAG1C,EAAIyC,EAAKzC,GAAKmD,ICc5BC,EAAyB,SAAC9K,EAAO+D,EAAMgH,EAAQnJ,GAEnDA,EAAME,IAASF,EAAK,CAAEoJ,mBAAmB,IAEzC,IAAMC,EAAgBlH,EAAKmH,YAGrBC,EAAeF,EAAgBA,EAAc9J,MAAM,EAAG8J,EAAczL,OAAS,GAAK,GAP7B4L,EAStBC,EAAqBrL,EAAO+D,EAAMoH,GAA/DG,EATmDF,EASnDE,YAAaC,EATsCH,EAStCG,YAEjBR,GAAUnJ,EAAIoJ,oBAChBQ,EAAWT,EAAQO,EAAa,CAAEnC,KAAM,SACxCqC,EAAWT,EAAQQ,EAAa,CAAEpC,KAAM,WACxCgC,EAAanM,QAAQ,SAAA6K,GACnB2B,EAAWT,EAAQlB,MAIvB,IAAM4B,EAAQC,EAAkBJ,EAAaC,EAAaJ,GACpDQ,EAAiBC,EAAoBN,EAAaC,EAAaJ,GAcrE,MAAO,CAAEU,KAZI,IAAI7C,SAAO8C,KAAKL,EAAO,CAClCtC,KAAM,GACNC,OAAQ,QACRC,YAAa,IACb0C,YAAY,IAQCC,UALG,IAAIhD,SAAO8C,KAAKH,EAAgB,CAChDxC,KAAM,QACN4C,YAAY,IAGYT,cAAaC,gBAMnCF,EAAuB,SAACrL,EAAO+D,EAAMkI,GACzC,IAoBIC,EAAUC,EApBRlI,EAASF,EAAKE,OAEdmI,EAAapM,EAAMuH,QAAQtD,EAAOhD,IAClCoL,EAAkBD,EAAWE,SAC7BC,EAAaH,EAAWnF,UACxBuF,EAAY,CAChB/E,EAAG4E,EAAgB5E,EAAI8E,EAAW3G,MAAQ,EAC1C8B,EAAG2E,EAAgB3E,GAGfvD,EAASJ,EAAKI,OACdsI,EAAazM,EAAMuH,QAAQpD,EAAOlD,IAClCyH,EAAO+D,EAAWC,YAAYvI,EAAOuE,MACrCiE,EAAkBF,EAAWH,SAC7BM,EAAaH,EAAWxF,UACxB4F,EAAY,CAChBpF,EAAGkF,EAAgBlF,EAAImF,EAAWhH,MAAQ,EAC1C8B,EAAGiF,EAAgBjF,EAAIkF,EAAW7G,OAAS,EAAI2C,EAAKhB,GAIlDuE,EAAMzM,QACR0M,EAAWD,EAAM,GACjBE,EAAWF,EAAMA,EAAMzM,OAAS,KAEhC0M,EAAWW,EACXV,EAAWK,GAKb,IAAMM,EAAS5C,EAAmBsC,EAAWN,EHtHd,IGwHzB7B,EAAW3B,EAAKtH,OAAS8G,EAAUC,GHxHV,GAEC,EGuH1B4E,EAAS7C,EAAmB2C,EAAWV,EAAU9B,GACvD,MAAO,CACLiB,YAAa1B,EAAWkD,GACxBvB,YAAa3B,EAAWmD,KAItBnB,EAAsB,SAACN,EAAaC,EAAaU,GACrD,IAMIe,EAFEC,EDtIuB,SAAC9C,EAAMC,GAEpC,IAAMK,IAAOL,EAAG1C,EAAIyC,EAAKzC,GACnB8C,EAAKJ,EAAG3C,EAAI0C,EAAK1C,EACvB,OAAO5B,KAAKqH,MAAMzC,EAAID,GCkIR2C,CAJUlB,GAASA,EAAMzM,OACnCyM,EAAMA,EAAMzM,OAAS,GACrB8L,EAE2CC,GACzC6B,EAAW,GAoBjB,OAjBAJ,EAAUK,EAAc,IAAK9B,GAC7B6B,EAASvO,KAAKmO,GAEdA,EAAUK,EAAc,IAAK,CAC3B5F,EAAG8D,EAAY9D,EHlIY,GGkIU5B,KAAKyH,KAAKL,EAAQpH,KAAK0H,GAAK,GACjE7F,EAAG6D,EAAY7D,EHnIY,GGmIU7B,KAAK2H,KAAKP,EAAQpH,KAAK0H,GAAK,KAEnEH,EAASvO,KAAKmO,GAEdA,EAAUK,EAAc,IAAK,CAC3B5F,EAAG8D,EAAY9D,EHxIY,GGwIU5B,KAAKyH,KAAKL,EAAQpH,KAAK0H,GAAK,GACjE7F,EAAG6D,EAAY7D,EHzIY,GGyIU7B,KAAK2H,KAAKP,EAAQpH,KAAK0H,GAAK,KAEnEH,EAASvO,KAAKmO,GAEdI,EAASvO,KAAK,KAEPuO,EAASK,KAAK,MAIjBjC,EAAa,SAACT,EAAQlB,EAAOjI,GAEjC,IAAMsH,GADNtH,EAAMA,GAAO,IACMsH,QAAU,EAEvBwE,EAAe,IAAI1E,SAAOC,OAAO,CACrCC,OAAQA,EACRC,KAAMvH,EAAIuH,MAAQ,QAClBP,IAAKiB,EAAMnC,EAAIwB,EACfL,KAAMgB,EAAMpC,EAAIyB,IAElB6B,EAAOrI,IAAIgL,IAwCPhC,EAAoB,SAACJ,EAAaC,EAAaU,GAGnD,IACIe,EADEI,EAAW,GAGjBJ,EAAUK,EAAc,IAAK/B,GAC7B8B,EAASvO,KAAKmO,GAUd,IARA,IAGIW,EACAC,EAAMC,EACNC,EAAcC,EACd7B,EAAUC,EAEL6B,EAAQ,EAAGC,EAAIhC,EAAMzM,OAAQwO,EAAQC,EAAGD,IAE/CL,EAAO1B,EAAM+B,GAEbJ,EAAO3B,EAAM+B,EAAQ,IAAM1C,EAC3BuC,EAAO5B,EAAM+B,EAAQ,IAAMzC,EAE3BuC,EAAeI,EAAUN,EAAMD,GAC/BI,EAAaG,EAAUP,EAAME,GAE7B3B,EAAW,CAAEzE,EAlBH,EAAI,EAkBSqG,EAAarG,EAjB1B,EAAI,EAiBkCkG,EAAKlG,EAAIC,EAjB/C,EAAI,EAiBqDiG,EAAKjG,EAlB9D,EAAI,EAkBsEoG,EAAapG,GACjGyE,EAAW,CAAE1E,EAnBH,EAAI,EAmBSsG,EAAWtG,EAlBxB,EAAI,EAkBgCkG,EAAKlG,EAAIC,EAlB7C,EAAI,EAkBmDiG,EAAKjG,EAnB5D,EAAI,EAmBoEqG,EAAWrG,GAE7FsF,EAAUK,EAAc,IAAKS,GAC7BV,EAASvO,KAAKmO,GAEdA,EAAUmB,EAAY,CAACjC,EAAUC,EAAU4B,IAC3CX,EAASvO,KAAKmO,GAMhB,OAHAA,EAAUK,EAAc,IAAK9B,GAC7B6B,EAASvO,KAAKmO,GAEPI,EAASK,KAAK,MAIjBJ,EAAgB,SAACe,EAAQvE,GAC7B,OAAOuE,EAAS,IAAMvE,EAAMpC,EAAI,IAAMoC,EAAMnC,GAGxCyG,EAAc,SAACpG,GACnB,GAAsB,IAAlBA,EAAOvI,OACT,MAAM,IAAIgD,MAAM,8BAA+BuF,EAAOvI,QAExD,IAAM6O,EAAQ,GAMd,OALAA,EAAMxP,KAAK,KACXkJ,EAAO/I,QAAQ,SAAA6K,GACbwE,EAAMxP,KAAKgL,EAAMpC,GACjB4G,EAAMxP,KAAKgL,EAAMnC,KAEZ2G,EAAMZ,KAAK,MAGdS,EAAY,SAAC5D,EAAIC,GACrB,MAAO,CACL9C,GAAI6C,EAAG7C,EAAI8C,EAAG9C,GAAK,EACnBC,GAAI4C,EAAG5C,EAAI6C,EAAG7C,GAAK,IC7QjB4G,EAAkB,IAAI5M,EAEtB6M,EAAqB,SAACC,GAC1B,IAAIA,IAAOA,EAAIvN,GAGb,MAAM,IAAIuB,MAAM,uDAFhB8L,EAAgB5L,IAAI8L,EAAIvN,GAAIuN,IAMnBC,EAAc,SAAC1D,EAAQ/K,GAClC0O,QAAQC,IAAI,mBACZ,IAAMC,EAAkBC,YAAYC,MAGpC9O,EAAMkH,WAAWlI,QAAQ,SAAAqE,GACvB,IAAImL,EACAF,EAAgBS,IAAI1L,EAAKpC,IL2CP,SAAC+N,EAAW3L,GACpC,IAAM5B,EAAM4B,EAAKiJ,SACX9K,EAAO6B,EAAK4D,UAEZuB,EAAUD,EAAqBlF,GAGrC2L,EAAUvM,IAAI,CACZoG,KAAMhD,KAAKoE,MAAMxI,EAAIgG,EAAIjG,EAAKoE,MAAQ,EAAI4C,GAC1CI,IAAK/C,KAAKoE,MAAMxI,EAAIiG,EAAIlG,EAAKuE,OAAS,KAExCiJ,EAAUC,YKnDNC,CADAV,EAAMF,EAAgBjK,IAAIhB,EAAKpC,IACfoC,GAMZA,EAAK8L,iBACPX,ELlBgB,SAACzD,EAAQ1H,GAC/B,IAAM5B,EAAM4B,EAAKiJ,SACX9K,EAAO6B,EAAK4D,UAEZmI,EAAW,GAEXC,EAAiB,IAAIrG,SAAOsG,KAAK,CACrCnG,KAAMnB,EAAiB3E,EAAKjC,MAC5BwE,MAAOpE,EAAKoE,MACZG,OAAQvE,EAAKuE,OACbwJ,GAAI,EACJC,GAAI,IAENJ,EAASvQ,KAAKwQ,GAEd,IAAMI,EAAgB,IAAIzG,SAAOM,KAAKjG,EAAKhC,UAAW,CACpDmI,SAAU,GACVC,WAAY,uBACZN,KAAM,OACNN,KC3B4B,GD4B5BD,IAAK8G,IAEPN,EAASvQ,KAAK4Q,GAEdpM,EAAKoF,WAAWzJ,QAAQ,SAAA0J,GACtB0G,EAASvQ,KAAK8J,EAAkBD,EAAMlH,MAGxC,IAAMgH,EAAUD,EAAqBlF,GAG/BsM,EAAQ,IAAI3G,SAAOW,MAAMyF,EAAU,CACvCnO,GAAIoC,EAAKpC,GAET4H,KAAMhD,KAAKoE,MAAMxI,EAAIgG,EAAIjG,EAAKoE,MAAQ,EAAI4C,GAC1CI,IAAK/C,KAAKoE,MAAMxI,EAAIiG,EAAIlG,EAAKuE,OAAS,GACtC6J,kBAAkB,EAClBC,aAAa,EACbC,yBAA0B,SAC1BC,YAAa,YAIf,OAFAhF,EAAOrI,IAAIiN,GAEJA,EKzBKK,CAASjF,EAAQ1H,GACvBkL,EAAmBC,MAIzBxO,EAAMiQ,mBAAmBjR,QAAQ,SAAAqE,GAC/B,IAAMmL,EAAMF,EAAgBjK,IAAIhB,EAAKpC,IACrC8J,EAAOtH,OAAO+K,GACdF,EAAgB7K,OAAOJ,EAAKpC,MAI9BjB,EAAMoH,WAAWpI,QAAQ,SAAA+E,GACvB,IAAIyK,EACAF,EAAgBS,IAAIhL,EAAK9C,IDdP,SAACiP,EAAWnM,EAAM/D,GAI1CkQ,EAAUC,cAAc,SAAA3B,GACtB0B,EAAUzM,OAAO+K,KALiC,IAAA4B,EAQxBtF,EAAuB9K,EAAO+D,GAAlD8H,EAR4CuE,EAQ5CvE,KAAMG,EARsCoE,EAQtCpE,UAEdkE,EAAUG,cAAcxE,GACxBqE,EAAUG,cAAcrE,GCMpBsE,CADA9B,EAAMF,EAAgBjK,IAAIN,EAAK9C,IACf8C,EAAM/D,GAMlB+D,EAAKoL,iBACPX,ED1CgB,SAACzD,EAAQhH,EAAM/D,EAAO4B,GAAQ,IAAA2O,EAExBzF,EAAuB9K,EAAO+D,EAAMgH,EAAQnJ,GAAhEiK,EAF4C0E,EAE5C1E,KAAMG,EAFsCuE,EAEtCvE,UAER2D,EAAQ,IAAI3G,SAAOW,MAAM,CAACkC,EAAMG,GAAY,CAChD/K,GAAI8C,EAAK9C,GACT2O,kBAAkB,EAClBC,aAAa,EACbW,YAAY,EAEZC,SAAS,IAIX,OADA1F,EAAOrI,IAAIiN,GACJA,EC4BKe,CAAS3F,EAAQhH,EAAM/D,GAC7BuO,EAAmBC,MAIzBxO,EAAM2Q,mBAAmB3R,QAAQ,SAAA+E,GAC/B,IAAMyK,EAAMF,EAAgBjK,IAAIN,EAAK9C,IACrC8J,EAAOtH,OAAO+K,GACdF,EAAgB7K,OAAOM,EAAK9C,MAG9B8J,EAAO6F,mBACP5Q,EAAM6Q,YAENnC,QAAQC,IAAI,+BACTE,YAAYC,MAAQF,GAAmB,IAAM,KAEhD,IAAMkC,EAAU9Q,EAAMkH,WAAW1H,OAC3BuR,EAAU/Q,EAAMoH,WAAW5H,OACjCkP,QAAQC,IAAI,WAAYmC,EAAS,WAAYC,EAC3C,iBAAkBD,EAAUC,EAAS,YAAahG,EAAOiG,aAAaxR,SC5DrDyR,cACnB,SAAAA,EAAYlG,EAAQ/K,GAAQ1B,OAAAC,EAAA,EAAAD,CAAAE,KAAAyS,GAC1BzS,KAAKuM,OAASA,EACdvM,KAAKwB,MAAQA,EAIbxB,KAAK0S,kBAAmB,EACxB1S,KAAK2S,gBAAiB,EACtB3S,KAAK4S,mBAAoB,qDAGpB,ICtBqBrG,EDsBrBlK,EAAArC,KACLA,KAAK6S,SACL7S,KAAKwB,MAAMsR,GAAG,eAAgB,WAC5BzQ,EAAK0Q,mBCzBmBxG,ED2BZvM,KAAKuM,QC1BduG,GAAG,aAAc,SAAS1P,GAC/B,IAAI4P,EAAM5P,EAAIyE,EACd7H,KAAKiT,YAAa,EAClBjT,KAAKkT,WAAY,EACjBlT,KAAKmT,SAAWH,EAAII,QACpBpT,KAAKqT,SAAWL,EAAIM,UAGtB/G,EAAOuG,GAAG,aAAc,SAAS1P,GAC/B,GAAIpD,KAAKiT,WAAY,CACnB,IAAIpL,EAAIzE,EAAIyE,EACZ7H,KAAKuT,kBAAkB,IAAM1L,EAAEuL,QAAUpT,KAAKmT,SAC9CnT,KAAKuT,kBAAkB,IAAM1L,EAAEyL,QAAUtT,KAAKqT,SAC9CrT,KAAKoS,mBACLpS,KAAKmT,SAAWtL,EAAEuL,QAClBpT,KAAKqT,SAAWxL,EAAEyL,WAItB/G,EAAOuG,GAAG,WAAY,SAAS1P,GAC7BpD,KAAKiT,YAAa,EAClBjT,KAAKkT,WAAY,EACb9P,EAAIuC,QACNuK,QAAQC,IAAI/M,EAAIuC,OAAOlD,IAKzBzC,KAAK2R,cAAc,SAAA3B,GACjBA,EAAIS,cAENzQ,KAAKoS,qBAGP7F,EAAOuG,GAAG,cAAe,SAAS1P,GAChC,IAAIoQ,EAAQpQ,EAAIyE,EAAE4L,OAEdC,EAAOnH,EAAOoH,WAClBD,GAAcF,EAAM,KACT,KAAIE,EAAO,IAClBA,EAAO,KAAKA,EAAO,IACvBnH,EAAOqH,YAAY,CAAE3K,EAAG7F,EAAIyE,EAAEmC,QAASd,EAAG9F,EAAIyE,EAAEgM,SAAWH,GAC3DtQ,EAAIyE,EAAEiM,iBACN1Q,EAAIyE,EAAEkM,qDDbN,IAAM/Q,EA3BD,CACLoE,MAAO4M,OAAOC,YAAcC,SAASC,gBAAgBC,YACrD7M,OAAQyM,OAAOK,aAAeH,SAASC,gBAAgBG,cA0BvDtU,KAAKuU,eAAevR,GACpBhD,KAAK+S,uDAGQ/P,GACbhD,KAAKuM,OAAOiI,SAASxR,EAAKoE,OAC1BpH,KAAKuM,OAAOkI,UAAUzR,EAAKuE,gDAKvBvH,KAAK0S,mBAKL1S,KAAK2S,eAGP3S,KAAK4S,mBAAoB,GAI3B5S,KAAK0S,kBAAmB,EAExBgC,sBAAsB1U,KAAK2U,UAAUC,KAAK5U,6CAI1CA,KAAK0S,kBAAmB,EAGpB1S,KAAK2S,iBAGT3S,KAAK2S,gBAAiB,EAEtBzC,QAAQC,IAAI,mBACZnQ,KAAK6U,iBAAmBxE,YAAYC,MACpClK,EAAcpG,KAAKwB,MAAO,CACxB8E,QAAS,GACTE,QAAS,GACTiB,WAAW,EACXtH,SAAUH,KAAK8U,QAAQF,KAAK5U,yCAIxB+U,GAAM,IAAA7P,EAAAlF,KACZA,KAAK2S,gBAAiB,EAElB3S,KAAK4S,oBACP5S,KAAK4S,mBAAoB,EACzB5S,KAAK+S,iBAGP7C,QAAQC,IAAI,+BACTE,YAAYC,MAAQtQ,KAAK6U,kBAAoB,IAAM,KAElDE,IAEF7E,QAAQC,IAAI,kBAAmB4E,EAAK3N,MAAO2N,EAAKxN,QAChDmN,sBAAsB,WACpBzE,EAAY/K,EAAKqH,OAAQrH,EAAK1D,UAGlC0O,QAAQC,IAAI,sBElGH6E,GACG,eADHA,GAEI,gBCcIC,eACnB,SAAAA,EAAY7S,EAASQ,GAAM,IAAAP,EAAA,OAAAvC,OAAAC,EAAA,EAAAD,CAAAE,KAAAiV,IACzB5S,EAAAvC,OAAAwC,EAAA,EAAAxC,CAAAE,KAAAF,OAAAyC,EAAA,EAAAzC,CAAAmV,GAAAzS,KAAAxC,QAEKyC,GAAK,KACVJ,EAAKO,KAAOA,EAEZP,EAAKoD,OAAS,KACdpD,EAAKsD,OAAS,KAEdtD,EAAK6S,QAAU,KAEf7S,EAAK8S,MAAM/S,GAXcC,2EAezB,OAAOrC,KAAKkV,0CAGJ3L,GACRvJ,KAAKkV,QAAU3L,qCAIf,MAAO,CAACvJ,KAAKyC,GAAI2S,KAAKC,UAAUrV,KAAKyF,QAAS2P,KAAKC,UAAUrV,KAAK2F,SAASsJ,KAAK,4CAIhF,QAASjP,KAAKkV,sCAGV9S,GACJ,IlBV6BkT,EAAiBC,EkBUxC5T,EAAYS,EAAQT,UAE1B,IAAKS,EAAQoT,eAAiBpT,EAAQqT,kBACpC,MAAM,IAAIzR,MAAM,2BAA6BoR,KAAKC,UAAUjT,IAQ9D,GALApC,KAAKyF,OAAS,CACZhD,GAAIf,EAAmBC,EAAWS,EAAQoT,cAC1CtL,KAAMnI,EAAoBJ,EAAWS,EAAQoT,aAAcpT,EAAQsT,cAGjE1V,KAAK4C,OAASoS,GAChBhV,KAAK2F,OAAS,CACZlD,GAAIf,EAAmBC,EAAWS,EAAQqT,mBAC1CvL,KAAMrI,EAAmBF,EAAWS,EAAQqT,kBAAmBrT,EAAQuT,gBAEpE,IAAI3V,KAAK4C,OAASoS,GAMvB,MAAM,IAAIhR,MAAM,sBAAwBhE,KAAK4C,MAL7C5C,KAAK2F,OAAS,CACZlD,GAAIf,EAAmBC,EAAWS,EAAQqT,mBAC1CvL,KAAMlI,EAA2BL,EAAWS,EAAQqT,kBAAmBrT,EAAQwT,uBAMnF5V,KAAKyC,IlBnCwB6S,EkBmCFtV,KAAKyF,OAAOyE,KlBnCOqL,EkBmCDvV,KAAK2F,OAAOuE,KlBlCpDoL,EAAkB,IAAMC,UkBvBChU,GCcrBsU,WAAc,eA5BzB,SAAAC,EAAYC,GAASjW,OAAAC,EAAA,EAAAD,CAAAE,KAAA8V,GACnB,IAAIE,EAAO9B,SAAS+B,eAAeF,GAC9BC,KACHA,EAAO9B,SAASgC,cAAc,QACzBC,aAAa,KAAMJ,GACxB7B,SAASkC,KAAKC,YAAYL,IAE5BhW,KAAKgW,KAAOA,oDAGRM,GACJtW,KAAKgW,KAAKO,UAAUrS,IAAIoS,gCAGrBA,GACHtW,KAAKgW,KAAKO,UAAUtR,OAAOqR,mCAGrBvL,GACN/K,KAAKgW,KAAKQ,YAAczL,wCAIxB,OAAO/K,KAAKgW,KAAK5B,qBAKM,CAAgB,iBCXtBqC,eACnB,SAAAA,EAAYrU,GAAS,IAAAC,EAAA,OAAAvC,OAAAC,EAAA,EAAAD,CAAAE,KAAAyW,IACnBpU,EAAAvC,OAAAwC,EAAA,EAAAxC,CAAAE,KAAAF,OAAAyC,EAAA,EAAAzC,CAAA2W,GAAAjU,KAAAxC,KAAMoC,KAEDsU,OAAS,KAEdrU,EAAK8S,MAAM/S,GALQC,2EAQTI,GACV,OAAOzC,KAAK0W,OAAO7Q,IAAIpD,0CAGVvC,GACb,OAAOF,KAAK0W,OAAO/V,OAAO,SAAAuJ,GAAI,OAAIA,EAAKtH,OAAS1C,uCAIhD,OAAOF,KAAK0W,OAAOtS,uCAMfhC,GAEJ,IAAMkG,EAAStI,KAAK2W,mBAAmBvU,GAEjCwU,EAAa5W,KAAK6W,mBAAmBzU,EAASkG,GAC9CwO,EAAc9W,KAAK+W,oBAAoB3U,EAASkG,GAChD0O,EAAahX,KAAKiX,mBAAmB7U,EAASkG,GAEpDtI,KAAK0W,OAAS1W,KAAKkX,gBAAgBN,EAAWvV,OAAOyV,EAAaE,IAElEhX,KAAKmX,QAAQ,CACX/P,MAAOkB,EAAO8O,cVrDY,GUqDuB,GACjD7P,OAAQe,EAAO+O,yDAWAjV,GAGjB,IAAMkV,EVvE6BpM,GUwEL7D,KAAKkQ,IAAI,EAAGnV,EAAQoV,gBAC5CC,EVvE6BC,GUwELtV,EAAQuV,gBAAgB3W,OAIhD4W,EAAwBxV,EAAQuV,gBAAgB3W,OAAS,EAAI,EAC7DqW,EAAchQ,KAAKkQ,IACrBD,EAAyBG,EV5EI,EU6EzBG,EVjF2B1M,GUkFL9I,EAAQyV,iBAItC,MAAO,CACLP,yBACAG,yBACAL,cALoBpX,KAAK8X,sBAAsB1V,GAM/CiV,6DAIkBjV,GAGpB,IAAIgV,EAAgB,EACpBvB,GAAYkC,MAAM,kBAElB,IAAK,IAAIC,EAAI,EAAGA,EAAI5V,EAAQuV,gBAAgB3W,OAAQgX,IAElDnC,GAAYoC,QAAQ7V,EAAQuV,gBAAgBK,IAC5CZ,EAAgB/P,KAAKkQ,IACjBH,EAAevB,GAAYzB,eAajC,OATAyB,GAAYqC,KAAK,kBAGjBrC,GAAYkC,MAAM,YAClBlC,GAAYoC,QAAQjY,KAAK6C,WACzBuU,EAAgB/P,KAAKkQ,IACjBH,EAAevB,GAAYzB,eAC/ByB,GAAYqC,KAAK,YAEVd,6CAGUhV,EAASkG,GAG1B,IAFA,IAAM6P,EAAQ,GACVC,EAAalN,GACR8M,EAAI,EAAGA,EAAI5V,EAAQoV,eAAgBQ,IAC1CG,EAAM9X,KAAK,CACToC,GAAMZ,EAAmBO,EAAQT,UAAWS,EAAQR,OAAQoW,GAC5DpV,KAAQ8G,EAAUC,GAClBoB,KAAQ,GAAGiN,EACX9O,EAAKkP,IAEPA,GVlIiClN,GUoInC,OAAOiN,8CAGW/V,EAASkG,GAE3B,IADA,IAAM6P,EAAQ,GACLH,EAAI,EAAGA,EAAI5V,EAAQyV,gBAAiBG,IAC3CG,EAAM9X,KAAK,CACToC,GAAMV,EAAoBK,EAAQT,UAAWS,EAAQR,OAAQoW,GAC7DpV,KAAQ8G,EAAUG,IAClBkB,KAAQ,GAAGiN,IAGf,OAAOG,6CAGU/V,EAASkG,GAK1B,IAHA,IAAM6P,EAAQ,GACVE,EACA/P,EAAOgP,uBVnJsB,EAHH,EUuJrBU,EAAI,EAAGA,EAAI5V,EAAQuV,gBAAgB3W,OAAQgX,IAClDG,EAAM9X,KAAK,CACToC,GAAMT,EACFI,EAAQT,UAAWS,EAAQR,OAAQQ,EAAQuV,gBAAgBK,IAC/DpV,KAAQ8G,EAAUI,MAClBiB,KAAQ3I,EAAQuV,gBAAgBK,GAChC9O,EAAKmP,IAEPA,GV9JiCX,GUiKnC,OAAOS,0CAGOA,GACd,IAAMG,EAAMtY,KAAKuY,eAAeJ,GAChC,GAAIG,EAAItX,OACN,MAAM,IAAIgD,MAAMsU,GAGlB,OAAO,IAAIpV,EAAWiV,0CAGTA,GAAO,IAAAjT,EAAAlF,KAEdwY,EAAgB,GAWtB,OAVAL,EAAM3X,QAAQ,SAAAiY,GACK,kBAANA,GACTD,EAAcnY,KAAK,eAAgBoY,GAGhCvT,EAAKwT,eAAeD,EAAEhW,KACzB+V,EAAcnY,KAAK,yBAIhBmY,yCAGM/V,GACb,OAAc,OAAPA,QAAsBkW,IAAPlW,IAAqBmW,mBAASnW,UA3KdN,YCiD1C,IC7D+BX,GD6DzBqX,GAAe,SAACC,GAAD,OAAU,SAACC,GAI9B,IAJyC,IAARC,EAAQjY,UAAAC,OAAA,QAAA2X,IAAA5X,UAAA,GAAAA,UAAA,GAAN,EAC7BqD,EAAS,GAGN4T,EAAI,EAAGA,EAAIe,IAAKf,EACvB5T,EAAO4T,GAAK,GAAM,GAAMc,IAI1B,IAAK,IAAIG,EAAI,EAAGA,EAAID,IAAKC,EAIvB,IAHA,IAAMhQ,EAAI,GAAK,GAAM6P,KACf5P,EAAI,EAAI4P,IAAS,GACjBI,EAAI,IAAM,GAAMJ,KACbd,EAAI,EAAGA,EAAIe,EAAGf,IAAK,CAC1B,IAAMmB,GAAKnB,EAAIe,EAAI7P,GAAKgQ,EACxB9U,EAAO4T,IAAM/O,EAAI5B,KAAK+R,KAAKD,EAAIA,GAKnC,IAAK,IAAInB,EAAI,EAAGA,EAAIe,IAAKf,EACvB5T,EAAO4T,GAAK3Q,KAAKkQ,IAAI,EAAGnT,EAAO4T,IAGjC,OAAO5T,IE9FIiV,GAAoB,CAC/B1X,UAAW,EACX6V,eAAgB,EAChBK,gBAAiB,EACjBF,gBAAiB,CAAC,SAGP2B,GAAa,CACxBC,kBAAqB,CAAC/B,eAAgB,EAAGG,gBAAiB,IAC1D6B,KAAQ,KACRC,WAAc,CAACjC,eAAgB,EAAGG,gBAAiB,CAAC,YAAa,WACjE+B,aAAgB,CAAClC,eAAgB,EAAGG,gBAAiB,CAAC,YAAa,SAAU,IAAK,SAClFgC,iBAAoB,CAAC9B,gBAAiB,EAAGF,gBAAiB,KCOtDiC,GADa9Z,OAAOS,KAAK+Y,IACkB3Y,OAAO,SAAAiC,GAAI,MAAa,qBAATA,OHbtB,SAACiX,GACzC,IA2CaC,EAAGC,EAAGC,EAAGC,EA3ChBC,EA2BR,SAAeL,GACb,IAAI,IAAI7B,EAAI,EAAGmC,EAAI,WAAaN,EAAI7Y,OAAQgX,EAAI6B,EAAI7Y,OAAQgX,IAE1DmC,GADAA,EAAI9S,KAAK+S,KAAKD,EAAIN,EAAIQ,WAAWrC,GAAI,cAC3B,GAAOmC,IAAM,GAEzB,OAAO,WAGH,OAFAA,EAAI9S,KAAK+S,KAAKD,EAAKA,IAAM,GAAK,YAC9BA,EAAI9S,KAAK+S,KAAKD,EAAKA,IAAM,GAAK,aACtBA,GAAKA,IAAM,MAAQ,GAnClBG,CAAMT,GAGbf,GAwCOgB,EAxCMI,IAwCHH,EAxCWG,IAwCRF,EAxCgBE,IAwCbD,EAxCqBC,IAyCpC,WAEL,IAAIK,GADJT,KAAO,IAAGC,KAAO,GACC,EAOlB,OANAD,EAAIC,EAAKA,IAAM,EACfA,GAHoBC,KAAO,IAGlBA,GAAK,GAAK,EAInBA,GAHAA,EAAMA,GAAK,GAAOA,IAAM,KAExBO,EAAIA,GADJN,EAAQ,GALsBA,KAAO,GAKzB,GACA,GACA,GACJM,IAAM,GAAK,aAhDfC,EAAU,SAACC,GAAD,OAASpT,KAAKqT,MAAM5B,IAAS2B,IAUvCE,EAAY9B,GAAaC,GAE/B,MAAO,CAACA,OAAM0B,UAASI,WAVJ,SAAC1U,GAAD,OAASA,EAAIsU,EAAQtU,EAAIlF,UAUT6Z,eARZ,SAAC9C,EAAO+C,GAAR,OAAgBzT,KAAKqT,MAAM3C,EAAQe,KAAUgC,EAAM/C,KAQvB4C,aGFNI,CAA2B,SAAnEjC,WAAM0B,cAASI,iBAAYD,gBAEbK,cAEnB,SAAAA,EAAYC,GAAWnb,OAAAC,EAAA,EAAAD,CAAAE,KAAAgb,GACrBhb,KAAKkb,OAAS,EACdlb,KAAKmb,WAAa,EAClBnb,KAAKob,kBAAoB,EACzBpb,KAAKqb,gBAAkB,GACvBrb,KAAKsE,OAAS,GAEdtE,KAAKsb,UAAYL,qEAGIR,GAAK,IAAApY,EAAArC,KAC1B,IAAIA,KAAKub,YAAT,CAIAvb,KAAKwb,0BAA0Bxb,KAAKkb,OAAST,GAG7C,IAAMgB,EAAiBzb,KAAK0b,yBAAyBjB,GAC/CkB,EAAW,GACjBF,EAAejb,QAAQ,SAACob,EAAKC,GAC3B,IAAK,IAAI7D,EAAI,EAAGA,EAAI4D,EAAK5D,IAAK,CAC5B,IAAM8D,EAAUzZ,EAAKgZ,gBAAgBQ,GACrC,GAAIC,GAAWA,EAAQ9a,OAASqB,EAAK+Y,kBACnC,OAEF/Y,EAAK6Y,QAAU,EACf,IAAMzY,EAAK,GAAKJ,EAAK6Y,OACfrW,EAAOxC,EAAK0Z,eAAetZ,GACjCoC,EAAKgX,MAAQA,EACbxZ,EAAKiC,OAAO7B,GAAMoC,EAClB8W,EAAStb,KAAKwE,GACdxC,EAAKiZ,UAAUU,SAASnX,EAAK3C,SAAU2C,EAAKjD,OAAQiD,GAC/CxC,EAAKgZ,gBAAgBQ,KACxBxZ,EAAKgZ,gBAAgBQ,GAAS,IAEhCxZ,EAAKgZ,gBAAgBQ,GAAOxb,KAAKoC,MAGrCyN,QAAQC,IAAI,eAAgBwL,EAAS3a,QAGrC,IAAIib,EAAkB,EACtBN,EAASnb,QAAQ,SAAAiF,GAEf,IADA,IAAMyW,EAAgB7U,KAAKkQ,IAAI,EAAGlQ,KAAK8U,KAAc,EAATrD,OACnCd,EAAI,EAAGA,EAAIkE,EAAelE,IAAK,CACtC,IAAMrS,EAAStD,EAAK+Z,iBAAiB3W,GACjCE,GAAUtD,EAAKga,yBAAyB5W,EAAQE,IAClDsW,OAIN/L,QAAQC,IAAI,eAAgB8L,GAG5Bjc,KAAKsb,UAAUU,SAAS,mBA7DA,QA8DxBhc,KAAKsE,OAAL,KAAmCtE,KAAKsc,eAAe,mBA9D/B,QA+DxBtc,KAAKuc,oCA/DmB,2DAkEA9B,GAAK,IAAAvV,EAAAlF,KAC7B,IAAIA,KAAKub,YAAT,CAOA,IAAME,EAAiBzb,KAAK0b,yBAAyBjB,GACjD+B,EAAoB,EACxBf,EAAejb,QAAQ,SAACob,EAAKC,GAC3B,IAAK,IAAI7D,EAAI,EAAGA,EAAI4D,EAAK5D,IAAK,CAC5B,IAAM8D,EAAU5W,EAAKmW,gBAAgBQ,GACrC,IAAKC,GAA8B,IAAnBA,EAAQ9a,OACtB,OAEF,IAAMY,EAASgZ,GAAWkB,UACnB5W,EAAKZ,OAAO1C,GACnB,IAAM6a,EAAMX,EAAQY,QAAQ9a,GAC5BsD,EAAKmW,gBAAgBQ,GAAOc,OAAOF,EAAK,GACxCD,IACAtX,EAAKoW,UAAUsB,YAAYhb,MAG/BsO,QAAQC,IAAI,iBAAkBqM,GAE9Bxc,KAAKuc,oCA5FmB,2DA+FAM,GACxB,IAGMC,EAASzV,KAAK8U,KAAKU,EAAK,IAC9B7c,KAAKmb,WAJkB,EAIL9T,KAAKkQ,IAAI,EAAGuF,GAC9B5M,QAAQC,IAAInQ,KAAKmb,WAAYnb,KAAKkb,yDAQXT,GACvB,IAAMrW,EAASuW,GAAU3a,KAAKmb,WAAY,GAEpC4B,EAAM3Y,EAAO4Y,OAAO,SAACC,EAAKnD,GAAN,OAAYmD,EAAMnD,GAAG,GAC/C,OAAO1V,EAAO8Y,IAAI,SAAAtB,GAAG,OAAIvU,KAAK8U,KAAKP,EAAMmB,EAAMtC,4CAGlC7Y,GACb,IAAMM,EAAW0Y,GAAWhB,IAC5B,OAAO5Z,KAAKsc,eAAepa,EAAUN,0CAGxBM,EAAUN,GACvB,OAAO0B,IAAS,CAACpB,WAAUN,UAAS0X,GAAWpX,GAAWmX,6CAQ3C5T,GACf,IAAMoW,EAAQpW,EAAOoW,MAIrB,OAF8B/C,KAAS,GAG9B9Y,KAAKmd,kBAAkBtB,EAAM,IAAM7b,KAAKmd,kBAAkBtB,EAAM,GAEhE7b,KAAKmd,kBAAkBtB,EAAM,IAAM7b,KAAKmd,kBAAkBtB,EAAM,6CAIzDA,GAChB,IAAMC,EAAU9b,KAAKqb,gBAAgBQ,GACrC,IAAK5V,EAAa6V,GAEhB,IADA,IAAIsB,EAAWtB,EAAQ9a,OAAS,EACzBoc,EAAW,GAAG,CACnB,IAAMxb,EAASgZ,GAAWkB,GACpBjX,EAAO7E,KAAKsE,OAAO1C,GAEzB,GAAsB,sBAAlBiD,EAAK3C,SACP,OAAO2C,EAGTuY,iEAW8B1X,GAElC,IAF4C,IAAA2X,EAAArd,KACtC2F,EAAS3F,KAAKsE,OAAOoB,GAClBmW,EAAQ7b,KAAKmb,WAAYU,GAAS,EAAGA,IAAS,CACrD,IAAMC,EAAU9b,KAAKqb,gBAAgBQ,GACrC,IAAK5V,EAAa6V,GAAU,CAC1BA,EAAQtb,QAAQ,SAAAoB,GACd,IAAM6D,EAAS4X,EAAK/Y,OAAO1C,GAC3Byb,EAAKhB,yBAAyB5W,EAAQE,KAExC,yDAQmBF,EAAQE,GAC/B,IAAI2X,GAAgB,EAEpB,GAAI3X,EAAO6R,gBAAkB7R,EAAOgS,gBAAgB3W,OAAQ,CAC1D,IAAMuc,EAAkB5X,EAAO6R,eAAiB7R,EAAOgS,gBAAgB3W,OACjEqL,EAAQ1G,EAAO6R,eAAiB+F,EACtCD,EAAiBxE,MAAUzM,OACtB,GAAI1G,EAAO6R,eAChB8F,GAAgB,MACX,KAAI3X,EAAOgS,gBAAgB3W,OAIhC,OAAO,EAHPsc,GAAgB,EAalB,OAPIA,EACFtd,KAAKsb,UAAUkC,mBAAmB/X,EAAO7D,OAAQ4Y,GAAQ/U,EAAOoS,iBAC5DlS,EAAO/D,OAAQ4Y,GAAQ7U,EAAO6R,iBAElCxX,KAAKsb,UAAUmC,oBAAoBhY,EAAO7D,OAAQ4Y,GAAQ/U,EAAOoS,iBAC7DlS,EAAO/D,OAAQgZ,GAAWjV,EAAOgS,mBAEhC,WF7NLsD,GAAW,gBGmBf,SAAAyC,IAAc,IAAArb,EAAA,OAAAvC,OAAAC,EAAA,EAAAD,CAAAE,KAAA0d,IACZrb,EAAAvC,OAAAwC,EAAA,EAAAxC,CAAAE,KAAAF,OAAAyC,EAAA,EAAAzC,CAAA4d,GAAAlb,KAAAxC,QAEKub,aAAc,EAEnBlZ,EAAKsb,aAAe,KALRtb,yEAWJe,GAKRA,EAAME,IAASF,EAAK,CAACwa,YAAY,IACjC5d,KAAKub,YAAcnY,EAAIwa,WAEnBxa,EAAIwa,WACN5d,KAAK6d,iBAAiBza,IAEtBpD,KAAK2d,aAAe,IAAI3C,GAAYhb,MACpCA,KAAK8d,eAAe1a,mDAIDqX,GACjBza,KAAKub,aAITvb,KAAK2d,aAAaI,uBAAuBtD,qDAGjBA,GACpBza,KAAKub,aAITvb,KAAK2d,aAAaK,0BAA0BvD,4CAG7BrX,GAEfA,EAAME,IAASF,EAAK,CAAC6a,aAAa,IAGlCje,KAAKgc,SAAS,oBAAqB,MACnChc,KAAKgc,SAAS,OAAQ,MACtBhc,KAAKgc,SAAS,OAAQ,MACtBhc,KAAKgc,SAAS,aAAc,MAC5Bhc,KAAKgc,SAAS,aAAc,MAC5Bhc,KAAKgc,SAAS,OAAQ,MACtBhc,KAAKgc,SAAS,OAAQ,MACtBhc,KAAKgc,SAAS,OAAQ,MACtBhc,KAAKgc,SAAS,eAAgB,MAC9Bhc,KAAKgc,SAAS,mBAAoB,MAIlChc,KAAKwd,mBAAmB,KAAM,IAAK,KAAM,KACzCxd,KAAKwd,mBAAmB,KAAM,IAAK,KAAM,KACzCxd,KAAKwd,mBAAmB,KAAM,IAAK,KAAM,KAGzCxd,KAAKyd,oBAAoB,KAAM,IAAK,KAAM,aAC1Czd,KAAKyd,oBAAoB,KAAM,IAAK,KAAM,aAG1Czd,KAAKwd,mBAAmB,KAAM,IAAK,KAAM,KACzCxd,KAAKwd,mBAAmB,KAAM,IAAK,KAAM,KAGzCxd,KAAKwd,mBAAmB,KAAM,IAAK,KAAM,KACzCxd,KAAKwd,mBAAmB,KAAM,IAAK,KAAM,KACzCxd,KAAKyd,oBAAoB,KAAM,IAAK,KAAM,UAGtCra,EAAI6a,aACNje,KAAKyd,oBAAoB,KAAM,IAAK,KAAM,UAI5Czd,KAAKwd,mBAAmB,KAAM,IAAK,KAAM,KACzCxd,KAAKwd,mBAAmB,KAAM,IAAK,KAAM,4CAG5Bpa,GACbpD,KAAK+d,uBAAuB,qCAMrB7b,EAAUN,EAAQsc,GACzBA,EAAQ5a,IAAS4a,EAAO5E,GAAWpX,GAAWmX,IAC9CrZ,KAAK8F,QAAQ,eAAbhG,OAAAqe,GAAA,EAAAre,CAAA,GAAiCuZ,GAAjC,CAAoDnX,WAAUN,UAAWsc,wCAG/Dtc,GACV5B,KAAK8F,QAAQ,iBAAbhG,OAAAqe,GAAA,EAAAre,CAAA,GAAmCuZ,GAAnC,CAAsDzX,uDAGrC4T,EAAcE,EAAaD,EAAmBE,GAC/D3V,KAAK8F,QAAQ,kBAAmB,CAC9BnE,UAAW,EACX6T,eACAE,cACAD,oBACAE,0DAIgBH,EAAcE,EAAaD,EAAmBG,GAChE5V,KAAK8F,QAAQ,sBAAuB,CAClCnE,UAAW,EACX6T,eACAE,cACAD,oBACAG,gCA1HoC/V,ICvBpCue,GAAMlK,SAAS+B,eAAe,iBAC9BoI,GAASnK,SAAS+B,eAAe,eCSjC1J,GAAS,IAAI/B,SAAO8T,OAAO,OAAQ,CAAEpL,WAAW,IAChD1R,GAAQ,IAAI6C,EACZka,GAAK,IAAI9L,GAAUlG,GAAQ/K,IAEjCwS,OAAOwK,iBAAiB,OAAQ,WAC9BD,GAAGE,SAELzK,OAAOwK,iBAAiB,SAAU,WAChCD,GAAG1L,WLP0BrR,GKUhBA,GLRbyZ,GAASnI,GAAG,eAAgB,SAAC1Q,GACd,IAAIqU,GAAarU,GACzBsc,MAAMld,MAEbyZ,GAASnI,GAAG,iBAAkB,SAAC1Q,GAC7B,IAAMR,EAASF,EAAmBU,EAAQT,UAAWS,EAAQR,QAC7DJ,GAAMmd,mBAAmB/c,KAE3BqZ,GAASnI,GAAG,kBAAmB,SAAC1Q,GACjB,IAAI6S,GAAK7S,EAAS4S,IAC1B0J,MAAMld,MAEbyZ,GAASnI,GAAG,sBAAuB,SAAC1Q,GACrB,IAAI6S,GAAK7S,EAAS4S,IAC1B0J,MAAMld,MAEbyZ,GAASnI,GAAG,qBAAsB,SAAC1Q,MAgBnC4R,OAAOwK,iBAAiB,UAAW,SAACI,GAElC,IAAMxc,EAAUwc,EAAM3W,KAEtB,OAAQ7F,EAAQyc,WACd,IAAK,eACH,IAAIpI,GAAarU,GAASsc,MAAMld,IAChC,MACF,IAAK,iBACH,IAAMI,EAASF,EAAmBU,EAAQT,UAAWS,EAAQR,QAC7DJ,GAAMmd,mBAAmB/c,GACzB,MACF,IAAK,kBACI,IAAIqT,GAAK7S,EAAS4S,IACpB0J,MAAMld,IACX,MACF,IAAK,sBACI,IAAIyT,GAAK7S,EAAS4S,IACpB0J,MAAMld,OI3DjB4c,GAAII,iBAAiB,QAAS,WACvBH,GAAO9H,UAAUuI,SAAS,SAI7BT,GAAO9H,UAAUrS,IAAI,QACrBma,GAAO9H,UAAUtR,OAAO,UAJxBoZ,GAAO9H,UAAUrS,IAAI,QACrBma,GAAO9H,UAAUtR,OAAO","file":"static/js/main.f7159603.chunk.js","sourcesContent":["module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"3d326f9fb3ff3d04e088.worker.js\");\n};","// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n\n/**\n * A module that can be extended into other classes to equip with\n * 'on', 'off', and 'trigger' features.\n */\nexport default class Events {\n  constructor() {\n\n    /**\n     * A mapping from event name to a list of event handlers.\n     * @private !Object<string, Array>\n     */\n    this._events = {};\n  }\n\n  /**\n   * Bind an event to a callback function.\n   * If the name is \"all\", it will listen to all events.\n   */\n  on(name, callback, context) {\n    if (!name || !callback) return this;\n\n    const handlers = this._events[name] || (this._events[name] = []);\n    handlers.push({ callback, context: context || this });\n\n    return this;\n  }\n\n  /**\n   * Remove one or many callbacks.\n   * If `name` is null, removes all callbacks for all events\n   * If `callback` is null, removes all callbacks for the event\n   */\n  off(name, callback) {\n    if (!this._events) return this;\n\n    const events = this._events;\n    const names = name ? [name] : Object.keys(events);\n    names.forEach(name => {\n      const handlers = events[name];\n\n      // the event name does not exist\n      if (!handlers) return;\n\n      // remove all callbacks for the event\n      if (!callback) {\n        delete events[name];\n        return;\n      }\n\n      const remaining = handlers.filter(handler => handler.callback !== callback);\n      events[name] = remaining;\n    })\n\n    return this;\n  }\n\n  /**\n   * Trigger events based on name and pass `args` to callback(s).\n   * If `name` is null, do nothing;\n   * Since `on(\"all\")` is allowed, when an event is triggered,\n   * we also fire all the callback(s) bound to \"all\"\n   */\n  trigger(name, ...args) {\n    if (!this._events || !name) return this;\n\n    const handlers = this._events[name];\n    const handlersForAll = this._events[\"all\"];\n\n    if (handlers) {\n      this._triggerHandlers(handlers, args);\n    }\n\n    if (handlersForAll) {\n      this._triggerHandlers(handlersForAll, [name].concat(args));\n    }\n\n    return this;\n  }\n\n  /** @private */\n  _triggerHandlers(handlers, args) {\n    handlers.forEach(handler => {\n      handler.callback.apply(handler.context, args);\n    })\n  }\n}\n","/**\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A Cell of graph could be Node or Edge. They all have property `graph`.\n */\nexport default class Cell {\n  constructor() {\n    this.graph = null;\n  }\n\n  addTo(graph) {\n    this.graph = graph;\n    graph.addCell(this);\n    return this;\n  }\n\n}","/**\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n /**\n * Computes the label for a node.\n * @param {number} contextId\n * @param {number} nodeId\n * @return {string}\n */\nexport const computeNodeGraphId = (contextId, nodeId) => {\n  return 'c' + contextId + 'n' + nodeId;\n};\n\nexport const computeInPortLabel = (contextId, nodeId, portIndex) => {\n  return computeNodeGraphId(contextId, nodeId) + 'input' + portIndex;\n}\n\nexport const computeOutPortLabel = (contextId, nodeId, portIndex) => {\n  return computeNodeGraphId(contextId, nodeId) + 'output' + portIndex;\n}\n\nexport const computeAudioParamPortLabel = (contextId, nodeId, name) => {\n  return computeNodeGraphId(contextId, nodeId) + '$param$' + name;\n}\n\nexport const computeNodeLabel = (nodeType, nodeId) => {\n  return nodeType + ' ' + nodeId;\n}\n\nexport const computeEdgeLabel = (sourcePortLabel, destinationPortLabel) => {\n  return sourcePortLabel + '|' + destinationPortLabel;\n}","/**\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Cell from \"./Cell\";\nimport { computeNodeGraphId, computeNodeLabel } from \"./label\";\n\n\nexport default class Node extends Cell {\n\n  constructor(message) {\n    super();\n\n    this.id = computeNodeGraphId(message.contextId, message.nodeId);\n    \n    let nodeType = message.nodeType;\n    if (nodeType.endsWith('Node')) {\n      nodeType = nodeType.slice(0, nodeType.length-4);\n    }\n    this.type = nodeType;\n    this.nodeLabel = computeNodeLabel(nodeType, message.nodeId)\n\n    this._size = null;\n    this._pos = null;   // position of the center\n  }\n\n  getSize() {\n    return this._size;\n  }\n\n  setSize(size) {\n    this._size = size;\n  }\n\n  getPos() {\n    return this._pos;\n  }\n\n  setPos(pos) {\n    this._pos = pos;\n    return this;\n  }\n\n  shouldRender() {\n    return !!this._pos;\n  }\n\n}","import { isArray } from \"util\";\nimport defaults from 'lodash.defaults'\n\n/**\n * A module that supports fast add/remove/get by id.\n * So far, it is just a dictionary, may be updated later.\n */\nexport default class Collection {\n  constructor(items, opt) {\n    /**\n     * A mapping from event name to a list of event handlers.\n     * @private {!Object<string, Item>}\n     */\n    this._items = {};\n\n    opt = defaults(opt, {trackEnter: false, trackExit: false});\n\n    this._trackEnter = opt.trackEnter;\n    this._trackExit = opt.trackExit;\n\n    if (opt.trackEnter) {\n      /**\n       * Store all newly added items, reset by `clearEnterExit`\n       * @private {!Array<Item>}\n       */\n      this._enter = [];\n    }\n\n    if (opt.trackExit) {\n      /**\n       * Store all removed items, reset by `clearEnterExit`\n       * @private {!Array<Item>}\n       */\n      this._exit = [];\n    }\n\n    if (items && isArray(items)) {\n      this.addItems(items);\n    }\n  }\n\n  add(id, item) {\n    if (arguments.length !== 2) {\n      throw new Error('Should have two arguments');\n    }\n    if (this._trackEnter) {\n      this._enter.push(item);\n    }\n    this.set(id, item);\n    return this;\n  }\n\n  addItems(items) {\n    items.forEach(item => {\n      this.add(item.id, item);\n    })\n  }\n\n  has(id) {\n    return this._items.hasOwnProperty(id);\n  }\n\n  get(id) {\n    return this._items[id];\n  }\n\n  set(id, item) {\n    this._items[id] = item;\n    return this;\n  }\n\n  remove(id) {\n    if (this._trackExit && this._items[id]) {\n      this._exit.push(this._items[id])\n    }\n    delete this._items[id];\n    return this;\n  }\n\n  values() {\n    return Object.values(this._items);\n  }\n\n  size() {\n    return Object.keys(this._items).length;\n  }\n\n  enter() {\n    if (!this._trackEnter) {\n      throw new Error('Should set trackEnter=true')\n    }\n    return this._enter;\n  }\n\n  exit() {\n    if (!this._trackExit) {\n      throw new Error('Should set trackExit=true')\n    }\n    return this._exit;\n  }\n\n  /** Clear the enter and exit */\n  clearEnterExit() {\n    if (this._trackEnter) {\n      this._enter = [];\n    }\n    if (this._trackExit) {\n      this._exit = [];\n    }\n  }\n\n}","/**\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Events from \"../util/Events\";\nimport Node from \"./Node\";\nimport Collection from \"../util/Collection\";\n\n\nexport default class Graph extends Events {\n    constructor() {\n        super();\n\n        this._nodes = new Collection(null, {trackExit: true});\n        this._edges = new Collection(null, {trackExit: true});\n        \n        /** @private {!Object<nodeId, !Object<Edge.id, true>>} */\n        this._out = {}\n        \n        /** @private {!Object<nodeId, !Object<Edge.id, true>>} */\n        this._in = {}\n    }\n\n    addCell(cell) {\n        if (cell instanceof Node) {\n            this.addNode(cell)\n        } else {\n            this.addEdge(cell)\n        }\n    }\n\n    addNode(node) {\n        this._nodes.add(node.id, node);\n        this._shouldRedraw();\n    }\n\n    /** When remove a node, remove all related edges as well. */\n    removeNodeAndEdges(nodeId) {\n        this.removeNode(nodeId);\n        this.removeEdgesOfNode(nodeId);\n    }\n\n    removeNode(nodeId) {\n        this._nodes.remove(nodeId);\n        this._shouldRedraw();\n    }\n\n    removeEdgesOfNode(nodeId) {\n        const outEdges = this._out[nodeId];\n        if (outEdges) {\n            Object.keys(outEdges).forEach(edgeId => {\n                this.removeEdge(edgeId)\n            })\n        }\n        const inEdges = this._in[nodeId];\n        if (inEdges) {\n            Object.keys(inEdges).forEach(edgeId => {\n                this.removeEdge(edgeId)\n            })\n        }\n        delete this._out[nodeId];\n        delete this._in[nodeId];\n    }\n\n    addEdge(edge) {\n        const sourceId = edge.source.id;\n        if (this._out[sourceId] && this._out[sourceId][edge.id]) {\n            // This link exists.\n            return;\n        }\n        this._edges.add(edge.id, edge);\n\n        if (!this._out[sourceId]) {\n            this._out[sourceId] = {};\n        }\n        this._out[sourceId][edge.id] = true;\n\n        const targetId = edge.target.id;\n        if (!this._in[targetId]) {\n            this._in[targetId] = {};\n        }\n        this._in[targetId][edge.id] = true;\n    }\n\n    removeEdge(edgeId) {\n        this._edges.remove(edgeId);\n        this._shouldRedraw();\n    }\n\n    getNodes() {\n        return this._nodes.values();\n    }\n\n    getNodesToRemove() {\n        return this._nodes.exit();\n    }\n\n    getNode(nodeId) {\n        return this._nodes.get(nodeId)\n    }\n\n    getEdges() {\n        return this._edges.values();\n    }\n\n    getEdgesToRemove() {\n        return this._edges.exit();\n    }\n\n    getEdge(edgeId) {\n        return this._edges.get(edgeId);\n    } \n\n    _shouldRedraw() {\n        this.trigger('shouldRedraw');\n    }\n\n    renderEnd() {\n        this._nodes.clearEnterExit();\n        this._edges.clearEnterExit();\n    }\n}\n","export const isObject = function(value) {\n  return !!value && (typeof value === 'object' || typeof value === 'function');\n};\n\nexport const noop = () => {}\n\nexport const sum = (arr) => arr.reduce((res, x) => res + x, 0);\n\nexport const isEmptyArray = (arr) => !arr || arr.length === 0;\n\n// /**\n//  * Find the point on the line from `from` to `to`, in which\n//  * the distance between the point and `from` is `distance`\n//  */\n// export const findPointByDistance = (from, to, distance) => {\n//   const theta = toRad(calcTheta(from, to));\n//   return {\n//     x: from.x + Math.cos(theta) * distance,\n//     y: from.y + Math.sin(theta) * distance\n//   }\n// }\n\n// export const calcTheta = (from, to) => {\n//   // Invert the y-axis.\n//   var y = -(to.y - from.y);\n//   var x = to.x - from.x;\n//   var rad = Math.atan2(y, x); // defined for all 0 corner cases\n\n//   // Correction for III. and IV. quadrant.\n//   if (rad < 0) {\n//       rad = 2 * Math.PI + rad;\n//   }\n\n//   return 180 * rad / Math.PI;\n// }\n\n// export const toRad = function(deg, over360) {\n\n//   over360 = over360 || false;\n//   deg = over360 ? deg : (deg % 360);\n//   return deg * Math.PI / 180;\n// };","\nimport graphlib from 'graphlib';\nimport LayoutWorker from './layout.worker';\n\n\nconst workers = [];\nexport const getWorker = (callback) => {\n  // so far, just use one worker\n  if (workers.length) {\n    return workers[0];\n  }\n\n  const myWorker = new LayoutWorker();\n  myWorker.onmessage = function(e) {\n    // restore the graph from serialized string\n    const glGraph =  graphlib.json.read(e.data);\n    callback(glGraph)\n  }\n  workers.push(myWorker);\n  return myWorker;\n}\n","import defaults from 'lodash.defaults'\nimport dagre from 'dagre';\nimport { noop } from \"../util/util\";\nimport graphlib from 'graphlib';\nimport { getWorker } from './getWorker';\n\nexport const computeLayout = (graph, opt) => {\n  opt = defaults(opt || {callback: noop});\n  \n  // the attrs names of dagre are all lowercase\n  const marginx = opt.marginX || 0;\n  const marginy = opt.marginY || 0;\n  \n  const glLabel = {\n    rankdir: 'LR',\n    marginx,\n    marginy\n  };\n  \n  const glGraph = convertToGraphlib(graph, {\n    directed: true,\n    setNodeLabel,\n    setEdgeLabel,\n  });\n\n  glGraph.setGraph(glLabel);\n\n  const afterLayout = (glGraph) => {\n    convertBackToGraph(glGraph, graph, opt);\n    opt.callback(getLayoutBBox(glGraph));\n  }\n  \n  if (opt.useWorker) {\n    const myWorker = getWorker(afterLayout);\n    // serialize the graph as string and send to worker\n    myWorker.postMessage(graphlib.json.write(glGraph));\n  } else {\n    dagre.layout(glGraph, {debugTiming: true});\n    afterLayout(glGraph);\n  }\n\n  function getLayoutBBox(glGraph) {\n    // Width and height of the graph extended by margins.\n    const glSize = glGraph.graph();\n    // Return the bounding box of the graph after the layout.\n    return {\n      marginx,\n      marginy,\n      width: Math.abs(glSize.width - 2 * marginx),\n      height: Math.abs(glSize.height - 2 * marginy)\n    };\n  }\n}\n\nconst setNodeLabel = (node) => {\n  const {width, height} = node.getSize();\n  return {width, height};\n}\n\nconst setEdgeLabel = (edge) => {\n  return {id: edge.id};\n}\n\nconst convertToGraphlib = (graph, opt) => {\n  const glGraph = new dagre.graphlib.Graph();\n\n  const setNodeLabel = opt.setNodeLabel || noop;\n  const setEdgeLabel = opt.setEdgeLabel || noop;\n\n  graph.getNodes().forEach(node => {\n    glGraph.setNode(node.id, setNodeLabel(node));\n  })\n\n  graph.getEdges().forEach(edge => {\n    glGraph.setEdge(edge.source.id, edge.target.id, setEdgeLabel(edge))\n  })\n\n  return glGraph;\n}\n\nconst convertBackToGraph = (glGraph, graph) => {\n\n  glGraph.nodes().forEach(nodeId => {\n    const nodeLabel = glGraph.node(nodeId);\n    // by default, the node position of dagre layout is the center position\n    graph.getNode(nodeId).setPos({\n      x: nodeLabel.x,\n      y: nodeLabel.y,\n    });\n    // console.log(\"Node \" + nodeId + \": \" + JSON.stringify(nodeLabel));\n  })\n\n  glGraph.edges().forEach(edge => {\n    const edgeLabel = glGraph.edge(edge);\n\n    // save the control points of curve\n    graph.getEdge(edgeLabel.id).setPoints(edgeLabel.points);\n    // console.log(\"Edge \" + edge.v + \" -> \" + edge.w  + \": \" + JSON.stringify(edgeLabel));\n  })\n\n}","\n/**\n * Computes the color that should be used to visualize an AudioNode.\n * @param {!string} nodeType The type of the node. With the Node suffix removed.\n * @param {boolean} [isOffline] Whether this node pertains to an\n *     OfflineAudioContext.\n * @return {string} The hex color used to visualize the AudioNode.\n */\nexport const computeNodeColor = function(nodeType, isOffline) {\n  // AudioNodes are grouped into color categories based on their purposes.\n  switch (nodeType) {\n    case 'AudioDestination':\n      // The destination nodes of OfflineAudioContexts are brown. Those of\n      // \"non-offline\" AudioContexts are a dark grey.\n      return isOffline ? '#5D4037' : '#37474F';\n    case 'AudioBufferSource':\n    case 'Oscillator':\n      return '#009688';\n    case 'BiquadFilter':\n    case 'Convolver':\n    case 'Delay':\n    case 'DynamicsCompressor':\n    case 'IIRFilter':\n    case 'Panner':\n    case 'StereoPanner':\n    case 'WaveShaper':\n      return '#2196F3';\n    case 'Analyser':\n      return '#00BCD4';\n    case 'Gain':\n    case 'ChannelMerger':\n    case 'ChannelSplitter':\n      return '#3F51B5';\n    case 'MediaElementAudioSource':\n    case 'MediaStreamAudioDestination':\n    case 'MediaStreamAudioSource':\n      return '#9C27B0';\n    case 'ScriptProcessor':\n      return '#C62828';\n    default:\n      // Nothing matched. Odd. Highlight this node in dark red.\n      return '#C62828';\n  }\n};","\n\n/**\n * Supported port types.\n * @enum {string}\n */\nexport const PortTypes = {\n  IN: Symbol('IN'),\n  OUT: Symbol('OUT'),\n  PARAM: Symbol('PARAM')\n}","import { fabric } from 'fabric';\nimport { computeNodeColor } from \"./computeNodeColor\";\nimport { LEFT_TEXT_INDENT, LEFT_SIDE_TOP_PADDING, INPUT_PORT_RADIUS, INPUT_PORT_COLOR, OUTPUT_PORT_COLOR, AUDIO_PARAM_RADIUS, PARAM_PORT_COLOR, PORT_PADDING } from './graphStyle';\nimport { PortTypes } from '../graph/PortTypes';\n\n/**\n * @typedef {import('../graph/NodeWithPort').default} Node\n */\n\n/**\n * Use fabric.js to draw the node and text.\n * @param {!fabric.Canvas} canvas\n * @param {!Node} node\n */\nexport const drawNode = (canvas, node) => {\n  const pos = node.getPos();\n  const size = node.getSize();\n\n  const elements = [];\n\n  const nodeBackground = new fabric.Rect({\n    fill: computeNodeColor(node.type),\n    width: size.width,\n    height: size.height,\n    rx: 5,\n    ry: 5,\n  });\n  elements.push(nodeBackground);\n\n  const nodeLabelText = new fabric.Text(node.nodeLabel, {\n    fontSize: 14,\n    fontFamily: \"Segoe UI, sans-serif\",\n    fill: '#fff',\n    left: LEFT_TEXT_INDENT,\n    top: LEFT_SIDE_TOP_PADDING + PORT_PADDING,\n  })\n  elements.push(nodeLabelText)\n\n  node.getPorts().forEach(port => {\n    elements.push(createPortElement(port, size));\n  })\n\n  const offsetX = getOffsetXDueToPorts(node);\n  // use a group to hold labels, ports.\n  // so the position of children can be relative\n  const group = new fabric.Group(elements, {\n    id: node.id,\n    // round the position such that text will be not blurry\n    left: Math.round(pos.x - size.width / 2 - offsetX),\n    top: Math.round(pos.y - size.height / 2),\n    hasRotatingPoint: false,\n    hasControls: false,\n    selectionBackgroundColor: 'orange',\n    hoverCursor: \"pointer\",\n  })\n  canvas.add(group);\n\n  return group;\n}\n\n/**\n * Update the position of the group that contains node and text.\n * @param {!fabric.Group} nodeGroup\n * @param {!Node} node\n */\nexport const updateNode = (nodeGroup, node) => {\n  const pos = node.getPos();\n  const size = node.getSize();\n\n  const offsetX = getOffsetXDueToPorts(node);\n\n  // round the position such that text will be not blurry\n  nodeGroup.set({\n    left: Math.round(pos.x - size.width / 2 - offsetX),\n    top: Math.round(pos.y - size.height / 2),\n  })\n  nodeGroup.setCoords();\n\n  return nodeGroup;\n}\n\nconst getOffsetXDueToPorts = (node) => {\n  // adding ports on the left side of the node will add some offset.\n  // since all the objects of the node are rendered as a group,\n  // the position of the group should minus this offset to make\n  // sure all the objects are still at the right position\n  let offsetX = 0;\n  node.getPorts().forEach(port => {\n    if (port.type === PortTypes.IN) {\n      offsetX = INPUT_PORT_RADIUS;\n    } else if (port.type === PortTypes.PARAM && offsetX === 0) {\n      offsetX = AUDIO_PARAM_RADIUS;\n    }\n  })\n  return offsetX;\n}\n\nconst createPortElement = (port, size) => {\n  let top, left;\n  let circle, label;\n\n  switch (port.type) {\n    case PortTypes.IN:\n      top = LEFT_SIDE_TOP_PADDING;\n      left = -INPUT_PORT_RADIUS;\n      circle = new fabric.Circle({\n        radius: INPUT_PORT_RADIUS,\n        fill: INPUT_PORT_COLOR,\n        top,\n        left,\n        stroke: 'black',\n        strokeWidth: 1,\n      });\n      label = new fabric.Text(port.text, {\n        fontSize: 14,\n        fontFamily: \"Segoe UI, sans-serif\",\n        fill: 'black',\n        top: top + INPUT_PORT_RADIUS / 4,\n        left: left + 6,\n      });\n      break;\n    case PortTypes.OUT:\n      top = size.height / 2 - INPUT_PORT_RADIUS;\n      left = size.width - INPUT_PORT_RADIUS;\n      circle = new fabric.Circle({\n        radius: INPUT_PORT_RADIUS,\n        fill: OUTPUT_PORT_COLOR,\n        top,\n        left,\n        stroke: 'black',\n        strokeWidth: 1,\n      });\n      label = new fabric.Text(port.text, {\n        fontSize: 14,\n        fontFamily: \"Segoe UI, sans-serif\",\n        fill: 'black',\n        left: left + 6,\n        top: top + INPUT_PORT_RADIUS / 4,\n      });\n      break;\n    case PortTypes.PARAM:\n      circle = new fabric.Circle({\n        radius: AUDIO_PARAM_RADIUS,\n        fill: PARAM_PORT_COLOR,\n        top: (port.y || 0) - AUDIO_PARAM_RADIUS,\n        left: 0 - AUDIO_PARAM_RADIUS,\n        stroke: 'black',\n        strokeWidth: 1,\n      });\n\n      label = new fabric.Text(port.text, {\n        fontSize: 12,\n        fontFamily: \"Segoe UI, sans-serif\",\n        fill: '#eee',\n        left: LEFT_TEXT_INDENT,\n        top: (port.y || 0) - AUDIO_PARAM_RADIUS - 2,\n      });\n      break;\n    default:\n      throw new Error('should not reach here')\n  }\n\n  return new fabric.Group([circle, label], {\n\n  });\n}\n\n\n/**\n * Use native context API.\n * @deprecated\n */\nexport const drawNodeNativeWay = (context, node) => {\n  const pos = node.getPos();\n  const size = node.getSize();\n\n  context.fillStyle = computeNodeColor(node.type);\n  context.fillRect(pos.x, pos.y, size.width, size.height);\n\n  context.font = \"14px Georgia\";  // remember to be the same size of textSandbox.css\n  context.fillStyle = 'red';\n  console.log(node.nodeLabel)\n  context.fillText(node.nodeLabel, pos.x, pos.y + 14);\n}\n","\nexport const PORT_PADDING = 4;\nexport const INPUT_PORT_RADIUS = 10;\nexport const TOTAL_INPUT_PORT_HEIGHT = INPUT_PORT_RADIUS * 2 + PORT_PADDING;\nexport const AUDIO_PARAM_RADIUS = 5;\nexport const TOTAL_PARAM_PORT_HEIGHT = AUDIO_PARAM_RADIUS * 2 + PORT_PADDING;\nexport const LEFT_TEXT_INDENT = 12;\nexport const LEFT_SIDE_TOP_PADDING = 5;\n\nexport const INPUT_PORT_COLOR = 'green';\nexport const OUTPUT_PORT_COLOR = 'red';\nexport const PARAM_PORT_COLOR = 'yellow';\n\nexport const ARROW_HEAD_SIZE = 12;","\nexport const round = (x, precision) => {\n  var f = Math.pow(10, precision || 0);\n  return Math.round(x * f) / f;\n}\n\n/**\n * Round a point to a given precision\n */\nexport const roundPoint = (point, precision) => {\n  var f = Math.pow(10, precision || 0);\n  point.x = Math.round(point.x * f) / f;\n  point.y = Math.round(point.y * f) / f;\n  return point;\n}","// return angle in radians\nexport const calcAngleRadian = (from, to) => {\n  // inverse y-axis\n  const dy = -(to.y - from.y);\n  const dx = to.x - from.x;\n  return Math.atan2(dy, dx);\n};\n// return angle in degrees\nexport const calcAngleDegrees = (from, to) => {\n  // inverse y-axis\n  const dy = -(to.y - from.y);\n  const dx = to.x - from.x;\n  return Math.atan2(dy, dx) * 180 / Math.PI;\n};\nexport const calcDistance = (p1, p2) => {\n  const dx = p1.x - p2.x;\n  const dy = p1.y - p2.y;\n  return Math.sqrt(dx * dx + dy * dy);\n};\n/**\n * Find the point on the line from `from` to `to`, in which\n * the distance between the `from` and the point is `distance`\n */\nexport const getPointByDistance = (from, to, distance) => {\n  const length = calcDistance(from, to);\n  if (length === 0) {\n    throw new Error('from should not be the same as to');\n  }\n  const ratio = distance / length;\n  return getPointByRatio(from, to, ratio);\n};\nexport const getPointByRatio = (from, to, ratio) => {\n  return {\n    x: from.x + (to.x - from.x) * ratio,\n    y: from.y + (to.y - from.y) * ratio\n  };\n};\n","import defaults from 'lodash.defaults'\nimport { fabric } from 'fabric';\nimport { PortTypes } from '../graph/PortTypes';\nimport { roundPoint } from '../util/roundPoint';\nimport { calcAngleRadian, getPointByDistance } from \"../util/geometry\";\nimport { ARROW_HEAD_SIZE, AUDIO_PARAM_RADIUS, INPUT_PORT_RADIUS } from './graphStyle';\n\n/**\n * Use fabric.js to draw the edge.\n * @param {!fabric.Canvas} canvas\n * @param {!Edge} edge\n * @param {!Graph} graph\n * @param {?Object} opt\n */\nexport const drawEdge = (canvas, edge, graph, opt) => {\n\n  const { path, arrowHead } = createPathAndArrowHead(graph, edge, canvas, opt);\n\n  const group = new fabric.Group([path, arrowHead], {\n    id: edge.id,\n    hasRotatingPoint: false,\n    hasControls: false,\n    hasBorders: false,\n    // selectable: false,  // even selectable=false, the event will stop propagation\n    evented: false,  // use evented=false to truely allow event propagation\n  })\n\n  canvas.add(group);\n  return group;\n};\n\n\nexport const updateEdge = (edgeGroup, edge, graph) => {\n\n  // remove the old path, add new path\n  // @see https://stackoverflow.com/questions/35436344/fabricjs-the-bounding-box-of-a-path-not-get-update-when-i-change-path-coordinat\n  edgeGroup.forEachObject(obj => {\n    edgeGroup.remove(obj);\n  })\n\n  const { path, arrowHead } = createPathAndArrowHead(graph, edge);\n\n  edgeGroup.addWithUpdate(path);\n  edgeGroup.addWithUpdate(arrowHead);\n\n  return edgeGroup;\n};\n\nconst createPathAndArrowHead = (graph, edge, canvas, opt) => {\n\n  opt = defaults(opt, { showControlPoints: false });\n\n  const controlPoints = edge.getPoints();\n\n  // remove the first and last point\n  const middlePoints = controlPoints ? controlPoints.slice(1, controlPoints.length - 1) : [];\n  // specify our own source and target points\n  const { sourcePoint, targetPoint } = findConnectionPoints(graph, edge, middlePoints);\n\n  if (canvas && opt.showControlPoints) {\n    drawCircle(canvas, sourcePoint, { fill: 'blue' })\n    drawCircle(canvas, targetPoint, { fill: 'purple' })\n    middlePoints.forEach(point => {\n      drawCircle(canvas, point)\n    })\n  }\n\n  const pathD = createRoundedPath(sourcePoint, targetPoint, middlePoints);\n  const arrowHeadPathD = createArrowHeadPath(sourcePoint, targetPoint, middlePoints);\n\n  const path = new fabric.Path(pathD, {\n    fill: '',\n    stroke: 'black',\n    strokeWidth: 1.5,\n    selectable: false,\n  });\n\n  const arrowHead = new fabric.Path(arrowHeadPathD, {\n    fill: 'black',\n    selectable: false,\n  });\n\n  return { path, arrowHead, sourcePoint, targetPoint }\n}\n\n/**\n * Find the intersection point between the port and the link.\n */\nconst findConnectionPoints = (graph, edge, route) => {\n  const source = edge.source;\n  /** @TODO consider the port of source node */\n  const sourceNode = graph.getNode(source.id);\n  const sourceCenterPos = sourceNode.getPos();\n  const sourceSize = sourceNode.getSize();\n  const sourcePos = {\n    x: sourceCenterPos.x + sourceSize.width / 2,\n    y: sourceCenterPos.y\n  }\n\n  const target = edge.target;\n  const targetNode = graph.getNode(target.id);\n  const port = targetNode.getPortById(target.port);\n  const targetCenterPos = targetNode.getPos();\n  const targetSize = targetNode.getSize();\n  const targetPos = {\n    x: targetCenterPos.x - targetSize.width / 2,\n    y: targetCenterPos.y - targetSize.height / 2 + port.y,\n  }\n\n  let control1, control2;\n  if (route.length) {\n    control1 = route[0];\n    control2 = route[route.length - 1]\n  } else {\n    control1 = targetPos;\n    control2 = sourcePos;\n  }\n\n  // find the intersection between the line from source to next\n  // and the circle of source port\n  const point1 = getPointByDistance(sourcePos, control1, INPUT_PORT_RADIUS);\n  // determine distance by port.type\n  const distance = port.type === PortTypes.IN ? INPUT_PORT_RADIUS : AUDIO_PARAM_RADIUS;\n  const point2 = getPointByDistance(targetPos, control2, distance);\n  return {\n    sourcePoint: roundPoint(point1),\n    targetPoint: roundPoint(point2)\n  }\n}\n\nconst createArrowHeadPath = (sourcePoint, targetPoint, route) => {\n  const lastMiddlePoint = route && route.length\n    ? route[route.length - 1]\n    : sourcePoint;\n\n  const angle = calcAngleRadian(lastMiddlePoint, targetPoint);\n  const segments = [];\n  let segment;\n\n  segment = createSegment('M', targetPoint);\n  segments.push(segment);\n\n  segment = createSegment('L', {\n    x: targetPoint.x - ARROW_HEAD_SIZE * Math.cos(-angle - Math.PI / 6),\n    y: targetPoint.y - ARROW_HEAD_SIZE * Math.sin(-angle - Math.PI / 6),\n  });\n  segments.push(segment);\n\n  segment = createSegment('L', {\n    x: targetPoint.x - ARROW_HEAD_SIZE * Math.cos(-angle + Math.PI / 6),\n    y: targetPoint.y - ARROW_HEAD_SIZE * Math.sin(-angle + Math.PI / 6),\n  });\n  segments.push(segment);\n\n  segments.push('Z');\n\n  return segments.join(' ');\n}\n\n/** For debug */\nconst drawCircle = (canvas, point, opt) => {\n  opt = opt || {};\n  const radius = opt.radius || 3;\n\n  const controlPoint = new fabric.Circle({\n    radius: radius,\n    fill: opt.fill || 'black',\n    top: point.y - radius,\n    left: point.x - radius,\n  })\n  canvas.add(controlPoint)\n}\n\n// const getTargetPoint = (graph, edge, route) => {\n//   const target = edge.target;\n\n//   const node = graph.getNode(target.id);\n//   const port = node.getPortById(target.port);\n\n//   const pos = node.getPos();\n//   const size = node.getSize();\n//   const targetPos = {\n//     x: pos.x - size.width/2,\n//     y: pos.y - size.height/2 + port.y,\n//   }\n\n//   const prev = route[route.length - 1];\n//   // find the intersection between the line from source to next\n//   // and the circle of source port\n//   return roundPoint({\n//     x: pos.x - size.width/2,\n//     y: pos.y - size.height/2 + port.y,\n//   })\n// }\n\n/**\n * Create a path by using all points.\n */\n// const createPath = (controlPoints) => {\n//   const segments = [];\n\n//   segments.push(createSegment('M', controlPoints[0]));\n//   segments.push(createCurve(controlPoints))\n//   return segments.join(' ')\n// }\n\n/**\n * Create a path from source to target. For better look, round the path.\n * @credit inspired by https://github.com/clientIO/joint/blob/master/src/connectors/rounded.mjs\n */\nconst createRoundedPath = (sourcePoint, targetPoint, route) => {\n\n  // const offset = 10;\n  const segments = [];\n  let segment;\n\n  segment = createSegment('M', sourcePoint)\n  segments.push(segment);\n\n  const _13 = 1 / 3;\n  const _23 = 2 / 3;\n\n  let curr;\n  let prev, next;\n  let roundedStart, roundedEnd;\n  let control1, control2;\n\n  for (let index = 0, n = route.length; index < n; index++) {\n\n    curr = route[index];\n\n    prev = route[index - 1] || sourcePoint;\n    next = route[index + 1] || targetPoint;\n\n    roundedStart = getMiddle(prev, curr)\n    roundedEnd = getMiddle(curr, next)\n\n    control1 = { x: (_13 * roundedStart.x) + (_23 * curr.x), y: (_23 * curr.y) + (_13 * roundedStart.y) };\n    control2 = { x: (_13 * roundedEnd.x) + (_23 * curr.x), y: (_23 * curr.y) + (_13 * roundedEnd.y) };\n\n    segment = createSegment('L', roundedStart);\n    segments.push(segment);\n\n    segment = createCurve([control1, control2, roundedEnd]);\n    segments.push(segment);\n  }\n\n  segment = createSegment('L', targetPoint);\n  segments.push(segment);\n\n  return segments.join(' ');\n\n}\n\nconst createSegment = (action, point) => {\n  return action + ' ' + point.x + ' ' + point.y;\n}\n\nconst createCurve = (points) => {\n  if (points.length !== 3) {\n    throw new Error('should be 3 points but got ', points.length);\n  }\n  const parts = [];\n  parts.push('C')\n  points.forEach(point => {\n    parts.push(point.x);\n    parts.push(point.y);\n  })\n  return parts.join(' ')\n}\n\nconst getMiddle = (p1, p2) => {\n  return {\n    x: (p1.x + p2.x) / 2,\n    y: (p1.y + p2.y) / 2\n  }\n}\n","import { drawNode, updateNode } from \"./renderNode\";\nimport { drawEdge, updateEdge } from \"./renderEdge\";\nimport Collection from \"../util/Collection\";\n\n/** Keep track of all groups/objects rendered by fabric.js */\nconst renderedObjects = new Collection();\n\nconst saveRenderedObject = (obj) => {\n  if (obj && obj.id) {\n    renderedObjects.add(obj.id, obj);\n  } else {\n    throw new Error('rendered object is not returned or does not have id')\n  }\n}\n\nexport const renderGraph = (canvas, graph) => {\n  console.log('start render...')\n  const startRenderTime = performance.now();\n\n  // update existing node or add new\n  graph.getNodes().forEach(node => {\n    let obj;\n    if (renderedObjects.has(node.id)) {\n      // update existing node\n      obj = renderedObjects.get(node.id);\n      updateNode(obj, node);\n    } else {\n      // add new node\n      // it is possible that new nodes are added after the layout,\n      // but before rendering in the next frame,\n      // so those new nodes do not have position and should not render\n      if (node.shouldRender()) {\n        obj = drawNode(canvas, node);\n        saveRenderedObject(obj);\n      }\n    }\n  });\n  graph.getNodesToRemove().forEach(node => {\n    const obj = renderedObjects.get(node.id);\n    canvas.remove(obj);\n    renderedObjects.remove(node.id);\n  })\n\n  // update existing edge or add new\n  graph.getEdges().forEach(edge => {\n    let obj;\n    if (renderedObjects.has(edge.id)) {\n      // update existing edge\n      obj = renderedObjects.get(edge.id);\n      updateEdge(obj, edge, graph);\n    } else {\n      // add new edge\n      // it is possible that new edges are added after the layout\n      // but before rendering in the next frame,\n      // so those new edges do not have position and should not render\n      if (edge.shouldRender()) {\n        obj = drawEdge(canvas, edge, graph);\n        saveRenderedObject(obj);\n      }\n    }\n  });\n  graph.getEdgesToRemove().forEach(edge => {\n    const obj = renderedObjects.get(edge.id);\n    canvas.remove(obj);\n    renderedObjects.remove(edge.id);\n  });\n\n  canvas.requestRenderAll();\n  graph.renderEnd();\n\n  console.log('finish render, time spent: ',\n    (performance.now() - startRenderTime) / 1000, 's')\n\n  const nodeNum = graph.getNodes().length;\n  const edgeNum = graph.getEdges().length;\n  console.log('nodeNum:', nodeNum, 'edgeNum:', edgeNum,\n    'should render:', nodeNum + edgeNum, 'rendered:', canvas.getObjects().length);\n}\n","// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport { computeLayout } from \"../layout/layout\";\nimport { renderGraph } from \"./renderGraph\";\nimport { enablePanZoom } from \"./panZoom\";\n\n\nconst getWindowSize = () => {\n  return {\n    width: window.innerWidth || document.documentElement.clientWidth,\n    height: window.innerHeight || document.documentElement.clientHeight,\n  }\n}\n\nexport default class Workspace {\n  constructor(canvas, graph) {\n    this.canvas = canvas;\n    this.graph = graph;\n    // this.context = canvas.getContext('2d');\n    // this.zoomLevel = 1.0;  // by default. handle zoom\n    // this.panOffset = [0, 0];  // handle pan\n    this._isRedrawPending = false;\n    this._isUsingWorker = false;\n    this._shouldRedrawNext = false;\n  }\n\n  init() {\n    this.resize()\n    this.graph.on('shouldRedraw', () => {\n      this.requestRedraw();\n    })\n    enablePanZoom(this.canvas);\n  }\n\n  resize() {\n    const size = getWindowSize();\n    this._setCanvasSize(size);\n    this.requestRedraw()\n  }\n\n  _setCanvasSize(size) {\n    this.canvas.setWidth(size.width);\n    this.canvas.setHeight(size.height);\n  }\n\n  requestRedraw() {\n\n    if (this._isRedrawPending) {\n      // a rAF is already pending, do not request again\n      return;\n    }\n\n    if (this._isUsingWorker) {\n      // a Web Worker is still computing layout, when it finishes,\n      // draw the newly updated graph\n      this._shouldRedrawNext = true;\n      return;\n    }\n\n    this._isRedrawPending = true;\n\n    requestAnimationFrame(this._relayout.bind(this));\n  }\n\n  _relayout() {\n    this._isRedrawPending = false;\n\n    // prevent sending to Worker while the previous one does not return\n    if (this._isUsingWorker) {\n      return;\n    }\n    this._isUsingWorker = true;\n\n    console.log('start layout...')\n    this._startLayoutTime = performance.now();\n    computeLayout(this.graph, {\n      marginX: 20,\n      marginY: 20,\n      useWorker: true,\n      callback: this._redraw.bind(this),\n    });\n  }\n\n  _redraw(bbox) {\n    this._isUsingWorker = false;\n\n    if (this._shouldRedrawNext) {\n      this._shouldRedrawNext = false;\n      this.requestRedraw();\n    }\n\n    console.log('finish layout, time spent: ',\n      (performance.now() - this._startLayoutTime) / 1000, 's');\n\n    if (bbox) {\n      // layout successfully\n      console.log('graph dimension', bbox.width, bbox.height);\n      requestAnimationFrame(() => {\n        renderGraph(this.canvas, this.graph)\n      });\n    }\n    console.log('redraw...')\n  }\n\n}\n","\n/**\n * Enable Pan Zoom by drag and mousewheel\n * @credit inspired by http://fabricjs.com/fabric-intro-part-5\n * @param {!fabric.Canvas} canvas \n */\nexport const enablePanZoom = (canvas) => {\n  canvas.on('mouse:down', function(opt) {\n    var evt = opt.e;\n    this.isDragging = true;\n    this.selection = false;\n    this.lastPosX = evt.clientX;\n    this.lastPosY = evt.clientY;\n  });\n\n  canvas.on('mouse:move', function(opt) {\n    if (this.isDragging) {\n      var e = opt.e;\n      this.viewportTransform[4] += e.clientX - this.lastPosX;\n      this.viewportTransform[5] += e.clientY - this.lastPosY;\n      this.requestRenderAll();\n      this.lastPosX = e.clientX;\n      this.lastPosY = e.clientY;\n    }\n  });\n\n  canvas.on('mouse:up', function(opt) {\n    this.isDragging = false;\n    this.selection = true;\n    if (opt.target) {\n      console.log(opt.target.id);\n      \n    }\n    // after panning, we have to setCoords in order to select objects\n    // @credit: https://stackoverflow.com/a/49850382\n    this.forEachObject(obj => {\n      obj.setCoords();\n    });\n    this.requestRenderAll();\n  });\n\n  canvas.on('mouse:wheel', function(opt) {\n    var delta = opt.e.deltaY;\n    // var pointer = canvas.getPointer(opt.e);\n    var zoom = canvas.getZoom();\n    zoom = zoom - delta/300;\n    if (zoom > 20) zoom = 20;\n    if (zoom < 0.1) zoom = 0.1;\n    canvas.zoomToPoint({ x: opt.e.offsetX, y: opt.e.offsetY }, zoom);\n    opt.e.preventDefault();\n    opt.e.stopPropagation();\n  });\n}","\n/**\n * Supported edge types.\n * @enum {string}\n */\nexport const EdgeTypes = {\n  NODE_TO_NODE: 'NODE_TO_NODE',\n  NODE_TO_PARAM: 'NODE_TO_PARAM'\n}","/**\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Cell from \"./Cell\";\nimport { EdgeTypes } from \"./EdgeTypes\";\nimport { computeNodeGraphId, computeEdgeLabel, computeOutPortLabel, computeInPortLabel, computeAudioParamPortLabel } from \"./label\";\n\n\nexport default class Edge extends Cell {\n  constructor(message, type) {\n    super();\n\n    this.id = null;\n    this.type = type;\n\n    this.source = null;  // {id: NodeId, port: PortId}\n    this.target = null;  // {id: NodeId, port: PortId}\n\n    this._points = null;  // control points\n\n    this._init(message);\n  }\n\n  getPoints() {\n    return this._points;\n  }\n\n  setPoints(points) {\n    this._points = points;\n  }\n\n  toString() {\n    return [this.id, JSON.stringify(this.source), JSON.stringify(this.target)].join(',')\n  }\n\n  shouldRender() {\n    return !!this._points;\n  }\n\n  _init(message) {\n    const contextId = message.contextId;\n\n    if (!message.sourceNodeId || !message.destinationNodeId) {\n      throw new Error('Undefined node message: ' + JSON.stringify(message));\n    }\n\n    this.source = {\n      id: computeNodeGraphId(contextId, message.sourceNodeId),\n      port: computeOutPortLabel(contextId, message.sourceNodeId, message.fromChannel)\n    }\n\n    if (this.type === EdgeTypes.NODE_TO_NODE) {\n      this.target = {\n        id: computeNodeGraphId(contextId, message.destinationNodeId),\n        port: computeInPortLabel(contextId, message.destinationNodeId, message.toChannel)\n      }\n    } else if (this.type === EdgeTypes.NODE_TO_PARAM) {\n      this.target = {\n        id: computeNodeGraphId(contextId, message.destinationNodeId),\n        port: computeAudioParamPortLabel(contextId, message.destinationNodeId, message.destinationParamName)\n      }\n    } else {\n      throw new Error('Unknown edge type: ' + this.type);\n    }\n\n    this.id = computeEdgeLabel(this.source.port, this.target.port);\n  }\n\n\n}","// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport './textSandbox.css'\n\nclass TextSandbox {\n  constructor(elemId) {\n    let elem = document.getElementById(elemId)\n    if (!elem) {\n      elem = document.createElement('div');\n      elem.setAttribute('id', elemId);\n      document.body.appendChild(elem);\n    }\n    this.elem = elem;\n  }\n\n  start(className) {\n    this.elem.classList.add(className);\n  }\n\n  stop(className) {\n    this.elem.classList.remove(className);\n  }\n\n  setText(text) {\n    this.elem.textContent = text;\n  }\n\n  clientWidth() {\n    return this.elem.clientWidth;\n  }\n\n}\n\nexport const textSandbox = new TextSandbox('text-sandbox');\n","/**\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isObject } from \"util\";\nimport { AUDIO_PARAM_RADIUS, INPUT_PORT_RADIUS, LEFT_SIDE_TOP_PADDING, LEFT_TEXT_INDENT, TOTAL_INPUT_PORT_HEIGHT, TOTAL_PARAM_PORT_HEIGHT } from '../ui/graphStyle';\nimport { textSandbox } from \"../ui/textSandbox\";\nimport Collection from \"../util/Collection\";\nimport { computeAudioParamPortLabel, computeInPortLabel, computeOutPortLabel } from \"./label\";\nimport { PortTypes } from './PortTypes';\nimport Node from './Node';\n\nexport default class NodeWithPort extends Node {\n  constructor(message) {\n    super(message);\n\n    this._ports = null;\n\n    this._init(message);\n  }\n\n  getPortById(id) {\n    return this._ports.get(id);\n  }\n\n  getPortsByType(name) {\n    return this._ports.filter(port => port.type === name);\n  }\n\n  getPorts() {\n    return this._ports.values();\n  }\n\n  /**\n   * @param {!NodeCreatedMessage} message \n   */\n  _init(message) {\n\n    const layout = this._computeNodeLayout(message);\n\n    const inputPorts = this._prepareInputPorts(message, layout);\n    const outputPorts = this._prepareOutputPorts(message, layout);\n    const paramPorts = this._prepareParamPorts(message, layout);\n\n    this._ports = this._createPortData(inputPorts.concat(outputPorts, paramPorts));\n\n    this.setSize({\n      width: layout.maxTextLength + LEFT_TEXT_INDENT + 30,\n      height: layout.totalHeight\n    })\n  }\n\n  /**\n   * Use number of inputs, outputs, and AudioParams to compute the layout\n   * for text and ports.\n   * @credit This function is mostly borrowed from Audion/\n   *      `audion.entryPoints.handleNodeCreated_()`.\n   *      https://github.com/google/audion/blob/master/js/entry-points/panel.js\n   */\n  _computeNodeLayout(message) {\n\n    // Even if there are no input ports, leave room for the node label.\n    const inputPortSectionHeight =\n        TOTAL_INPUT_PORT_HEIGHT * Math.max(1, message.numberOfInputs);\n    const paramPortSectionHeight =\n        TOTAL_PARAM_PORT_HEIGHT * message.audioParamNames.length;\n\n    // Use the max of the left and right side heights as the total height.\n    // Include a little padding on the left.\n    const leftSideBottomPadding = message.audioParamNames.length ? 6 : 8;\n    const totalHeight = Math.max(\n        inputPortSectionHeight + paramPortSectionHeight + LEFT_SIDE_TOP_PADDING +\n            leftSideBottomPadding,\n        TOTAL_INPUT_PORT_HEIGHT * message.numberOfOutputs);\n\n    const maxTextLength = this._computeMaxTextLength(message)\n\n    return {\n      inputPortSectionHeight,\n      paramPortSectionHeight,\n      maxTextLength,\n      totalHeight,\n    }\n  }\n\n  _computeMaxTextLength(message) {\n    // Compute the max width. Part of that entails computing the max param label\n    // length. Style the invisible text sandbox so that it accurately sizes text.\n    let maxTextLength = 0;\n    textSandbox.start('audioParamText')\n\n    for (var i = 0; i < message.audioParamNames.length; i++) {\n      // Determine the audio param label max length.\n      textSandbox.setText(message.audioParamNames[i]);\n      maxTextLength = Math.max(\n          maxTextLength, textSandbox.clientWidth());\n    }\n\n    // No longer size the text based on the smaller audio param text font.\n    textSandbox.stop('audioParamText');\n\n    // Determine the would-be length of the node label text.\n    textSandbox.start('nodeText')\n    textSandbox.setText(this.nodeLabel);\n    maxTextLength = Math.max(\n        maxTextLength, textSandbox.clientWidth());\n    textSandbox.stop('nodeText');\n    \n    return maxTextLength;\n  }\n\n  _prepareInputPorts(message, layout) {\n    const ports = [];\n    let inputPortY = INPUT_PORT_RADIUS + LEFT_SIDE_TOP_PADDING;\n    for (let i = 0; i < message.numberOfInputs; i++) {\n      ports.push({\n        'id': computeInPortLabel(message.contextId, message.nodeId, i),\n        'type': PortTypes.IN,\n        'text': ''+i,\n        'y': inputPortY\n      });\n      inputPortY += TOTAL_INPUT_PORT_HEIGHT\n    }\n    return ports;\n  }\n\n  _prepareOutputPorts(message, layout) {\n    const ports = [];\n    for (let i = 0; i < message.numberOfOutputs; i++) {\n      ports.push({\n        'id': computeOutPortLabel(message.contextId, message.nodeId, i),\n        'type': PortTypes.OUT,\n        'text': ''+i\n      });\n    }\n    return ports;\n  }\n\n  _prepareParamPorts(message, layout) {\n    // Create labels for audio param ports.\n    const ports = [];\n    let audioParamY =\n        layout.inputPortSectionHeight + LEFT_SIDE_TOP_PADDING + AUDIO_PARAM_RADIUS;\n    for (var i = 0; i < message.audioParamNames.length; i++) {\n      ports.push({\n        'id': computeAudioParamPortLabel(\n            message.contextId, message.nodeId, message.audioParamNames[i]),\n        'type': PortTypes.PARAM,\n        'text': message.audioParamNames[i],\n        'y': audioParamY\n      });\n      audioParamY += TOTAL_PARAM_PORT_HEIGHT;\n    }\n\n    return ports\n  }\n\n  _createPortData(ports) {\n    const err = this._validatePorts(ports)\n    if (err.length) {\n      throw new Error(err);\n    }\n\n    return new Collection(ports);\n  }\n\n  _validatePorts(ports) {\n\n    const errorMessages = [];\n    ports.forEach(p => {\n      if (typeof p !== 'object') {\n        errorMessages.push('Invalid port', p);\n      }\n\n      if (!this._isValidPortId(p.id)) {\n        errorMessages.push('port id is required')\n      }\n    })\n\n    return errorMessages;\n  }\n\n  _isValidPortId(id) {\n    return id !== null && id !== undefined && !isObject(id);\n  }\n\n\n}","\n/**\n * Pass a string as random seed, return a generator based on sfc32\n * The `rand()` has value [0,1]\n * @param {string} str Random seed\n * @example\n * const {rand, randInt, randChoice} = getRandomGeneratorWithSeed('seed');\n * rand();\n */\nexport const getRandomGeneratorWithSeed = (str) => {\n  const seed = xmur3(str);\n\n  /** Return a random float [0, 1] */\n  const rand = sfc32(seed(), seed(), seed(), seed());\n  /** Return a random integer [0, num] */\n  const randInt = (num) => Math.floor(rand() * num);\n  /** Return a random item from array `arr` */\n  const randChoice = (arr) => arr[randInt(arr.length)];\n  /** Return a random integer from [start, end] */\n  const randIntBetween = (start, end) => Math.floor(start + rand() * (end - start));\n\n  /**\n   * Returns an array of m psuedorandom, smoothly-varying non-negative integers.\n   * This array has k random bumps.\n   */\n  const randBumps = getRandBumps(rand);\n\n  return {rand, randInt, randChoice, randIntBetween, randBumps};\n}\n\n\n/**\n * Hash the random seed such that similar seeds will obtain very\n * different results.\n * @credit copy from https://stackoverflow.com/a/47593316\n * @param {string} str Random seed\n */\nfunction xmur3(str) {\n  for(var i = 0, h = 1779033703 ^ str.length; i < str.length; i++) {\n    h = Math.imul(h ^ str.charCodeAt(i), 3432918353);\n    h = (h << 13) | (h >>> 19);\n  }\n  return function() {\n      h = Math.imul(h ^ (h >>> 16), 2246822507);\n      h = Math.imul(h ^ (h >>> 13), 3266489909);\n      return (h ^= h >>> 16) >>> 0;\n  }\n}\n\n/**\n * Pseudorandom number generator\n * @credit copy from https://stackoverflow.com/a/47593316\n */\nfunction sfc32(a, b, c, d) {\n  return function() {\n    a >>>= 0; b >>>= 0; c >>>= 0; d >>>= 0; \n    var t = (a + b) | 0;\n    a = b ^ (b >>> 9);\n    b = c + (c << 3) | 0;\n    c = ((c << 21) | (c >>> 11));\n    d = d + 1 | 0;\n    t = t + d | 0;\n    c = c + t | 0;\n    return (t >>> 0) / 4294967296;\n  }\n}\n\n\n/**\n * Returns an array of m psuedorandom, smoothly-varying non-negative numbers.\n * This array has k random bumps\n * @credit adapted from https://observablehq.com/@d3/stacked-to-grouped-bars\n */\nconst getRandBumps = (rand) => (m, k=5) => {\n  const values = [];\n\n  // Initialize with uniform random values in [0.1, 0.2).\n  for (let i = 0; i < m; ++i) {\n    values[i] = 0.1 + 0.1 * rand();\n  }\n\n  // Add k random bumps.\n  for (let j = 0; j < k; ++j) {\n    const x = 1 / (0.1 + rand());\n    const y = 2 * rand() - 0.5;\n    const z = 10 / (0.1 + rand());\n    for (let i = 0; i < m; i++) {\n      const w = (i / m - y) * z;\n      values[i] += x * Math.exp(-w * w);\n    }\n  }\n\n  // Ensure all values are positive.\n  for (let i = 0; i < m; ++i) {\n    values[i] = Math.max(0, values[i]);\n  }\n\n  return values;\n}\n\n","import Edge from '../graph/Edge';\nimport { EdgeTypes } from '../graph/EdgeTypes';\nimport NodeWithPort from '../graph/NodeWithPort';\nimport MockMessager from './MockMessager';\nimport { computeNodeGraphId } from '../graph/label';\n\n\nconst messager = new MockMessager();\n// for debug\n// const addNodesButton = document.getElementById('add-nodes-btn');\n// const removeNodesButton = document.getElementById('remove-nodes-btn');\n\nexport const startListening = (graph) => {\n  // TODO: does it start with lower-case k or upper-case K?\n  messager.on('KNodeCreated', (message) => {\n    const node = new NodeWithPort(message);\n    node.addTo(graph);\n  });\n  messager.on('kNodeDestroyed', (message) => {\n    const nodeId = computeNodeGraphId(message.contextId, message.nodeId);\n    graph.removeNodeAndEdges(nodeId);\n  });\n  messager.on('KNodesConnected', (message) => {\n    const edge = new Edge(message, EdgeTypes.NODE_TO_NODE);\n    edge.addTo(graph);\n  });\n  messager.on('kNodeParamConnected', (message) => {\n    const edge = new Edge(message, EdgeTypes.NODE_TO_PARAM);\n    edge.addTo(graph);\n  });\n  messager.on('kNodesDisconnected', (message) => {\n    // TODO\n  });\n  // ??, is there any disconnectNodeParam?\n\n  // addNodesButton.addEventListener('click', (e) => {\n  //   messager.addRandomNodesAndLinks(6);\n  // });\n\n  // removeNodesButton.addEventListener('click', (e) => {\n  //   messager.removeRandomNodesAndLinks(6);\n  // });\n\n  // messager.startMock({manualMode: false});\n\n  // Listen to the message sent from the iframe of demo page\n  window.addEventListener('message', (event) => {\n    // if (!event.origin.startsWith('http://localhost:8000')) return;\n    const message = event.data;\n    let edge;\n    switch (message.eventType) {\n      case 'KNodeCreated':\n        new NodeWithPort(message).addTo(graph);\n        break;\n      case 'kNodeDestroyed':\n        const nodeId = computeNodeGraphId(message.contextId, message.nodeId);\n        graph.removeNodeAndEdges(nodeId);\n        break;\n      case 'KNodesConnected':\n        edge = new Edge(message, EdgeTypes.NODE_TO_NODE);\n        edge.addTo(graph);\n        break;\n      case 'kNodeParamConnected':\n        edge = new Edge(message, EdgeTypes.NODE_TO_PARAM);\n        edge.addTo(graph);\n        break;\n      default:\n        // console.log(event.data);\n        break;\n    }\n  })\n\n}\n","\n\n\nexport const DEFAULT_NODE_ATTR = {\n  contextId: 1,\n  numberOfInputs: 1,\n  numberOfOutputs: 1,\n  audioParamNames: ['gain']\n}\n\nexport const NODE_ATTRS = {\n  'AudioBufferSource': {numberOfInputs: 0, audioParamNames: []},\n  'Gain': null,\n  'Oscillator': {numberOfInputs: 0, audioParamNames: ['frequency', 'detune']},\n  'BiquadFilter': {numberOfInputs: 1, audioParamNames: ['frequency', 'detune', 'Q', 'gain']},\n  'AudioDestination': {numberOfOutputs: 0, audioParamNames: []},\n}\n","/**\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport defaults from 'lodash.defaults';\nimport { getRandomGeneratorWithSeed } from '../util/random';\nimport { isEmptyArray } from '../util/util';\nimport { DEFAULT_NODE_ATTR, NODE_ATTRS } from './constants';\n\nconst NODE_TYPES = Object.keys(NODE_ATTRS);\nconst NODE_TYPES_EXCEPT_DESTINATION = NODE_TYPES.filter(type => type !== 'AudioDestination');\nconst DESTINATION_NODE_ID = 'dest'\n\nconst {rand, randInt, randChoice, randBumps} = getRandomGeneratorWithSeed('small');\n\nexport default class RandomGraph {\n\n  constructor(messager) {\n    this._count = 0;\n    this._maxLevels = 6;  // the number of levels from left to right\n    this._maxNodesPerLevel = 6;  // the number of nodes per level\n    this._nodeIdsByLevel = {};  // Object<level, Array<nodeId>>\n    this._nodes = {};   // Object<nodeId, Node>, to find node easier by id\n\n    this._messager = messager;\n  }\n\n  addRandomNodesAndLinks(num) {\n    if (this._manualMode) {\n      return;  // do nothing\n    }\n\n    this._updateMaxLevelByTotalNum(this._count + num);\n\n    // add nodes based on Gaussian\n    const nodesPerLevels = this._getRandomNodesByGausian(num)\n    const newNodes = [];\n    nodesPerLevels.forEach((val, level) => {\n      for (let i = 0; i < val; i++) {\n        const nodeIds = this._nodeIdsByLevel[level];\n        if (nodeIds && nodeIds.length > this._maxNodesPerLevel) {\n          return;  // do not add more node to this level\n        }\n        this._count += 1;\n        const id = '' + this._count;\n        const node = this._getRandomNode(id);\n        node.level = level;\n        this._nodes[id] = node;\n        newNodes.push(node);\n        this._messager._addNode(node.nodeType, node.nodeId, node)\n        if (!this._nodeIdsByLevel[level]) {\n          this._nodeIdsByLevel[level] = [];\n        }\n        this._nodeIdsByLevel[level].push(id);\n      }\n    })\n    console.log('added nodes:', newNodes.length)\n\n    // add links; a link can only point to the next two levels of nodes\n    let numOfAddedLinks = 0;\n    newNodes.forEach(source => {\n      const numberOfLinks = Math.max(1, Math.ceil(rand() * 3));\n      for (let i = 0; i < numberOfLinks; i++) {\n        const target = this._getRandomTarget(source);\n        if (target && this._addRandomLinkTypeToPair(source, target)) {\n          numOfAddedLinks++;\n        }\n      }\n    })\n    console.log('added edges:', numOfAddedLinks)\n\n    // add a destination node and add several links to it\n    this._messager._addNode('AudioDestination', DESTINATION_NODE_ID)\n    this._nodes[DESTINATION_NODE_ID] = this._getNodeByType('AudioDestination', DESTINATION_NODE_ID)\n    this._connectLastLevelNodesToDestination(DESTINATION_NODE_ID);\n  }\n\n  removeRandomNodesAndLinks(num) {\n    if (this._manualMode) {\n      return;  // do nothing\n    }\n\n    // here, I just delete the nodes, the links should be automatically removed\n    // this might change if DevTool can receive disconnect message\n    // remove nodes based on Gaussian\n    const nodesPerLevels = this._getRandomNodesByGausian(num)\n    let numOfRemovedNodes = 0;\n    nodesPerLevels.forEach((val, level) => {\n      for (let i = 0; i < val; i++) {\n        const nodeIds = this._nodeIdsByLevel[level];\n        if (!nodeIds || nodeIds.length === 0) {\n          return;  // do not remove node from this level\n        }\n        const nodeId = randChoice(nodeIds);\n        delete this._nodes[nodeId];\n        const idx = nodeIds.indexOf(nodeId);\n        this._nodeIdsByLevel[level].splice(idx, 1);\n        numOfRemovedNodes++;\n        this._messager._removeNode(nodeId);\n      }\n    })\n    console.log('removed nodes:', numOfRemovedNodes)\n\n    this._connectLastLevelNodesToDestination(DESTINATION_NODE_ID);\n  }\n\n  _updateMaxLevelByTotalNum(total) {\n    const levelsPerChunk = 6;\n    const averageNodePerLevel = 4;\n    // for example, given 0~24 nodes we use 6 levels; given 24-48 nodes, we use 12 levels\n    const chunks = Math.ceil(total / (levelsPerChunk * averageNodePerLevel));\n    this._maxLevels = Math.max(1, chunks) * levelsPerChunk;\n    console.log(this._maxLevels, this._count)\n  }\n\n  /**\n   * Generate nodes randomly for each level.\n   * The total number is not exactly the given num.\n   * @TODO make sure that it generates the exact number of nodes\n   */\n  _getRandomNodesByGausian(num) {\n    const values = randBumps(this._maxLevels, 3);\n    // console.log(values)\n    const sum = values.reduce((res, a) => res + a, 0);\n    return values.map(val => Math.ceil(val / sum * num));\n  }\n\n  _getRandomNode(nodeId) {\n    const nodeType = randChoice(NODE_TYPES_EXCEPT_DESTINATION)\n    return this._getNodeByType(nodeType, nodeId);\n  }\n\n  _getNodeByType(nodeType, nodeId) {\n    return defaults({nodeType, nodeId}, NODE_ATTRS[nodeType], DEFAULT_NODE_ATTR)\n  }\n\n  /**\n   * Find a random target within the next two levels from source.\n   * @param {!Object} source \n   * @return {Node | null}\n   */\n  _getRandomTarget(source) {\n    const level = source.level;\n    // have a higher chance to find in the next level than next-next level\n    const shouldFindInNextLevel = rand() < 0.6;\n\n    if (shouldFindInNextLevel) {\n      return this._tryTargetInLevel(level+1) || this._tryTargetInLevel(level+2);\n    } else {\n      return this._tryTargetInLevel(level+2) || this._tryTargetInLevel(level+1);\n    }\n  }\n  \n  _tryTargetInLevel(level) {\n    const nodeIds = this._nodeIdsByLevel[level];\n    if (!isEmptyArray(nodeIds)) {\n      let maxRetry = nodeIds.length + 1;\n      while (maxRetry > 0) {\n        const nodeId = randChoice(nodeIds)\n        const node = this._nodes[nodeId];\n        // AudioBufferSource cannot be a target\n        if (node.nodeType !== 'AudioBufferSource') {\n          return node;\n        }\n        \n        maxRetry--;\n      }\n    }\n  }\n\n  /**\n   * @FIXME Just find the current last level and connect to destination\n   * No need to worry about whether a link is duplicated or should be removed\n   * This is because 1) when we add a link, it automatically de-duplicates,\n   * 2) when we remove a node, the links will be automatically removed.\n   */\n  _connectLastLevelNodesToDestination(targetId) {\n    const target = this._nodes[targetId];\n    for (let level = this._maxLevels; level >= 0; level--) {\n      const nodeIds = this._nodeIdsByLevel[level];\n      if (!isEmptyArray(nodeIds)) {\n        nodeIds.forEach(nodeId => {\n          const source = this._nodes[nodeId];\n          this._addRandomLinkTypeToPair(source, target)\n        })\n        break;\n      }\n    }\n  }\n\n  /**\n   * @return true if add a link, otherwise false\n   */\n  _addRandomLinkTypeToPair(source, target) {\n    let addNodeToNode = true;\n\n    if (target.numberOfInputs && target.audioParamNames.length) {\n      const totalInputParam = target.numberOfInputs + target.audioParamNames.length;\n      const ratio = target.numberOfInputs / totalInputParam;\n      addNodeToNode = (rand() <= ratio);\n    } else if (target.numberOfInputs) {\n      addNodeToNode = true;\n    } else if (target.audioParamNames.length) {\n      addNodeToNode = false;\n    } else {\n      // target might be AudioBufferSource, skip\n      return false;\n    }\n\n    if (addNodeToNode) {\n      this._messager._addNodeToNodeLink(source.nodeId, randInt(source.numberOfOutputs),\n          target.nodeId, randInt(target.numberOfInputs));\n    } else {\n      this._messager._addNodeToParamLink(source.nodeId, randInt(source.numberOfOutputs),\n          target.nodeId, randChoice(target.audioParamNames))\n    }\n    return true;\n  }\n\n}","/**\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport defaults from 'lodash.defaults';\nimport Events from \"../util/Events\";\nimport RandomGraph from './RandomGraph';\nimport { NODE_ATTRS, DEFAULT_NODE_ATTR } from './constants';\n\n/**\n * Mock the communication between web application and the dev tool\n */\nexport default class MockMessager extends Events {\n\n  constructor() {\n    super();\n\n    this._manualMode = true;\n\n    this._randomGraph = null;\n  }\n\n  /**\n   * Mock the node creation, connection, etc.\n   */\n  startMock(opt) {\n    // the layout is the same as \n    // https://raw.githubusercontent.com/google/audion/master/wiki_content/reset%20button.png\n    // except the first Oscillator is replaced with AudioBufferSource\n    \n    opt = defaults(opt, {manualMode: false});\n    this._manualMode = opt.manualMode\n\n    if (opt.manualMode) {\n      this._startManualMock(opt);\n    } else {\n      this._randomGraph = new RandomGraph(this);\n      this._startAutoMock(opt);\n    }\n  }\n\n  addRandomNodesAndLinks(num) {\n    if (this._manualMode) {\n      return;  // do nothing\n    }\n\n    this._randomGraph.addRandomNodesAndLinks(num);\n  }\n\n  removeRandomNodesAndLinks(num) {\n    if (this._manualMode) {\n      return;  // do nothing\n    }\n\n    this._randomGraph.removeRandomNodesAndLinks(num);\n  }\n\n  _startManualMock(opt) {\n\n    opt = defaults(opt, {allowCyclic: false});\n\n    // nodes\n    this._addNode('AudioBufferSource', 's0')\n    this._addNode('Gain', 'g0')\n    this._addNode('Gain', 'g1')\n    this._addNode('Oscillator', 'o0')\n    this._addNode('Oscillator', 'o1')\n    this._addNode('Gain', 'g2')\n    this._addNode('Gain', 'g3')\n    this._addNode('Gain', 'g4')\n    this._addNode('BiquadFilter', 'b0')\n    this._addNode('AudioDestination', 'd0')\n\n    // links\n    // from source to gain\n    this._addNodeToNodeLink('s0', '0', 'g0', '0')\n    this._addNodeToNodeLink('s0', '0', 'g1', '0')\n    this._addNodeToNodeLink('s0', '0', 'g4', '0')\n\n    // from gain to Oscillator\n    this._addNodeToParamLink('g0', '0', 'o0', 'frequency')\n    this._addNodeToParamLink('g1', '0', 'o1', 'frequency')\n    \n    // from Oscillator to gain\n    this._addNodeToNodeLink('o0', '0', 'g2', '0')\n    this._addNodeToNodeLink('o1', '0', 'g3', '0')\n    \n    // from gain to BiquadFilter\n    this._addNodeToNodeLink('g2', '0', 'b0', '0')\n    this._addNodeToNodeLink('g3', '0', 'b0', '0')\n    this._addNodeToParamLink('g4', '0', 'b0', 'detune')\n\n    // backward edge, to make the graph cyclic\n    if (opt.allowCyclic) {\n      this._addNodeToParamLink('g3', '0', 'o1', 'detune')\n    }\n\n    // from gain and BiquadFilter to destination\n    this._addNodeToNodeLink('b0', '0', 'd0', '0')\n    this._addNodeToNodeLink('g4', '0', 'd0', '0')\n  }\n\n  _startAutoMock(opt) {\n    this.addRandomNodesAndLinks(20)\n  }\n\n\n  //// Trigger events\n\n  _addNode(nodeType, nodeId, attrs) {\n    attrs = defaults(attrs, NODE_ATTRS[nodeType], DEFAULT_NODE_ATTR);\n    this.trigger('KNodeCreated', {...DEFAULT_NODE_ATTR, nodeType, nodeId, ...attrs})\n  }\n\n  _removeNode(nodeId) {\n    this.trigger('kNodeDestroyed', {...DEFAULT_NODE_ATTR, nodeId});\n  }\n\n  _addNodeToNodeLink(sourceNodeId, fromChannel, destinationNodeId, toChannel) {\n    this.trigger('KNodesConnected', {\n      contextId: 1,\n      sourceNodeId,\n      fromChannel,\n      destinationNodeId,\n      toChannel\n    })\n  }\n\n  _addNodeToParamLink(sourceNodeId, fromChannel, destinationNodeId, destinationParamName) {\n    this.trigger('kNodeParamConnected', {\n      contextId: 1,\n      sourceNodeId,\n      fromChannel,\n      destinationNodeId,\n      destinationParamName\n    })\n  }\n}\n","\nconst btn = document.getElementById('toggle-iframe');\nconst iframe = document.getElementById('demo-iframe');\n\nexport const initIframeHandler = () => {\n  btn.addEventListener('click', () => {\n    if (!iframe.classList.contains('show')) {\n      iframe.classList.add('show');\n      iframe.classList.remove('hide')\n    } else {\n      iframe.classList.add('hide')\n      iframe.classList.remove('show');\n    }\n  })\n}\n","// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport './css/index.css';\nimport { fabric } from 'fabric';\nimport Graph from './js/graph/Graph';\nimport Workspace from './js/ui/Workspace';\nimport { startListening } from './js/messaging/startListening';\nimport { initIframeHandler } from './js/iframe/iframeHandler';\n\nconst canvas = new fabric.Canvas('root', { selection: false });\nconst graph = new Graph();\nconst ws = new Workspace(canvas, graph);\n\nwindow.addEventListener('load', () => {\n  ws.init();\n});\nwindow.addEventListener('resize', () => {\n  ws.resize();\n});\n\nstartListening(graph);\ninitIframeHandler();\n"],"sourceRoot":""}